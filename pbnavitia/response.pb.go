// Code generated by protoc-gen-go. DO NOT EDIT.
// source: response.proto

package pbnavitia

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StreetNetworkMode int32

const (
	StreetNetworkMode_Walking     StreetNetworkMode = 0
	StreetNetworkMode_Bike        StreetNetworkMode = 1
	StreetNetworkMode_Car         StreetNetworkMode = 3
	StreetNetworkMode_Bss         StreetNetworkMode = 4
	StreetNetworkMode_Ridesharing StreetNetworkMode = 5
	StreetNetworkMode_CarNoPark   StreetNetworkMode = 6
)

var StreetNetworkMode_name = map[int32]string{
	0: "Walking",
	1: "Bike",
	3: "Car",
	4: "Bss",
	5: "Ridesharing",
	6: "CarNoPark",
}
var StreetNetworkMode_value = map[string]int32{
	"Walking":     0,
	"Bike":        1,
	"Car":         3,
	"Bss":         4,
	"Ridesharing": 5,
	"CarNoPark":   6,
}

func (x StreetNetworkMode) Enum() *StreetNetworkMode {
	p := new(StreetNetworkMode)
	*p = x
	return p
}
func (x StreetNetworkMode) String() string {
	return proto.EnumName(StreetNetworkMode_name, int32(x))
}
func (x *StreetNetworkMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StreetNetworkMode_value, data, "StreetNetworkMode")
	if err != nil {
		return err
	}
	*x = StreetNetworkMode(value)
	return nil
}
func (StreetNetworkMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type SectionType int32

const (
	SectionType_PUBLIC_TRANSPORT    SectionType = 1
	SectionType_STREET_NETWORK      SectionType = 2
	SectionType_WAITING             SectionType = 3
	SectionType_TRANSFER            SectionType = 4
	SectionType_boarding            SectionType = 6
	SectionType_landing             SectionType = 7
	SectionType_BSS_RENT            SectionType = 8
	SectionType_BSS_PUT_BACK        SectionType = 9
	SectionType_CROW_FLY            SectionType = 10
	SectionType_PARK                SectionType = 11
	SectionType_LEAVE_PARKING       SectionType = 12
	SectionType_ALIGHTING           SectionType = 13
	SectionType_RIDESHARING         SectionType = 14
	SectionType_ON_DEMAND_TRANSPORT SectionType = 15
)

var SectionType_name = map[int32]string{
	1:  "PUBLIC_TRANSPORT",
	2:  "STREET_NETWORK",
	3:  "WAITING",
	4:  "TRANSFER",
	6:  "boarding",
	7:  "landing",
	8:  "BSS_RENT",
	9:  "BSS_PUT_BACK",
	10: "CROW_FLY",
	11: "PARK",
	12: "LEAVE_PARKING",
	13: "ALIGHTING",
	14: "RIDESHARING",
	15: "ON_DEMAND_TRANSPORT",
}
var SectionType_value = map[string]int32{
	"PUBLIC_TRANSPORT":    1,
	"STREET_NETWORK":      2,
	"WAITING":             3,
	"TRANSFER":            4,
	"boarding":            6,
	"landing":             7,
	"BSS_RENT":            8,
	"BSS_PUT_BACK":        9,
	"CROW_FLY":            10,
	"PARK":                11,
	"LEAVE_PARKING":       12,
	"ALIGHTING":           13,
	"RIDESHARING":         14,
	"ON_DEMAND_TRANSPORT": 15,
}

func (x SectionType) Enum() *SectionType {
	p := new(SectionType)
	*p = x
	return p
}
func (x SectionType) String() string {
	return proto.EnumName(SectionType_name, int32(x))
}
func (x *SectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SectionType_value, data, "SectionType")
	if err != nil {
		return err
	}
	*x = SectionType(value)
	return nil
}
func (SectionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type TransferType int32

const (
	TransferType_walking TransferType = 1
	TransferType_stay_in TransferType = 3
)

var TransferType_name = map[int32]string{
	1: "walking",
	3: "stay_in",
}
var TransferType_value = map[string]int32{
	"walking": 1,
	"stay_in": 3,
}

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}
func (x TransferType) String() string {
	return proto.EnumName(TransferType_name, int32(x))
}
func (x *TransferType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransferType_value, data, "TransferType")
	if err != nil {
		return err
	}
	*x = TransferType(value)
	return nil
}
func (TransferType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type SectionAdditionalInformationType int32

const (
	SectionAdditionalInformationType_ODT_WITH_ZONE          SectionAdditionalInformationType = 1
	SectionAdditionalInformationType_ODT_WITH_STOP_POINT    SectionAdditionalInformationType = 2
	SectionAdditionalInformationType_ODT_WITH_STOP_TIME     SectionAdditionalInformationType = 3
	SectionAdditionalInformationType_HAS_DATETIME_ESTIMATED SectionAdditionalInformationType = 4
	SectionAdditionalInformationType_REGULAR                SectionAdditionalInformationType = 5
	SectionAdditionalInformationType_STAY_IN                SectionAdditionalInformationType = 6
)

var SectionAdditionalInformationType_name = map[int32]string{
	1: "ODT_WITH_ZONE",
	2: "ODT_WITH_STOP_POINT",
	3: "ODT_WITH_STOP_TIME",
	4: "HAS_DATETIME_ESTIMATED",
	5: "REGULAR",
	6: "STAY_IN",
}
var SectionAdditionalInformationType_value = map[string]int32{
	"ODT_WITH_ZONE":          1,
	"ODT_WITH_STOP_POINT":    2,
	"ODT_WITH_STOP_TIME":     3,
	"HAS_DATETIME_ESTIMATED": 4,
	"REGULAR":                5,
	"STAY_IN":                6,
}

func (x SectionAdditionalInformationType) Enum() *SectionAdditionalInformationType {
	p := new(SectionAdditionalInformationType)
	*p = x
	return p
}
func (x SectionAdditionalInformationType) String() string {
	return proto.EnumName(SectionAdditionalInformationType_name, int32(x))
}
func (x *SectionAdditionalInformationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SectionAdditionalInformationType_value, data, "SectionAdditionalInformationType")
	if err != nil {
		return err
	}
	*x = SectionAdditionalInformationType(value)
	return nil
}
func (SectionAdditionalInformationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{3}
}

type GenderType int32

const (
	GenderType_FEMALE GenderType = 1
	GenderType_MALE   GenderType = 2
)

var GenderType_name = map[int32]string{
	1: "FEMALE",
	2: "MALE",
}
var GenderType_value = map[string]int32{
	"FEMALE": 1,
	"MALE":   2,
}

func (x GenderType) Enum() *GenderType {
	p := new(GenderType)
	*p = x
	return p
}
func (x GenderType) String() string {
	return proto.EnumName(GenderType_name, int32(x))
}
func (x *GenderType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GenderType_value, data, "GenderType")
	if err != nil {
		return err
	}
	*x = GenderType(value)
	return nil
}
func (GenderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type ResponseType int32

const (
	ResponseType_ITINERARY_FOUND                 ResponseType = 1
	ResponseType_DATE_OUT_OF_BOUNDS              ResponseType = 2
	ResponseType_NO_ORIGIN_POINT                 ResponseType = 3
	ResponseType_NO_DESTINATION_POINT            ResponseType = 4
	ResponseType_NO_ORIGIN_NOR_DESTINATION_POINT ResponseType = 5
	ResponseType_NO_VIA_POINT                    ResponseType = 6
	ResponseType_NO_SOLUTION                     ResponseType = 7
	ResponseType_CONNECTION_LIMITATION           ResponseType = 8
	ResponseType_DURATION_LIMITATION             ResponseType = 9
)

var ResponseType_name = map[int32]string{
	1: "ITINERARY_FOUND",
	2: "DATE_OUT_OF_BOUNDS",
	3: "NO_ORIGIN_POINT",
	4: "NO_DESTINATION_POINT",
	5: "NO_ORIGIN_NOR_DESTINATION_POINT",
	6: "NO_VIA_POINT",
	7: "NO_SOLUTION",
	8: "CONNECTION_LIMITATION",
	9: "DURATION_LIMITATION",
}
var ResponseType_value = map[string]int32{
	"ITINERARY_FOUND":                 1,
	"DATE_OUT_OF_BOUNDS":              2,
	"NO_ORIGIN_POINT":                 3,
	"NO_DESTINATION_POINT":            4,
	"NO_ORIGIN_NOR_DESTINATION_POINT": 5,
	"NO_VIA_POINT":                    6,
	"NO_SOLUTION":                     7,
	"CONNECTION_LIMITATION":           8,
	"DURATION_LIMITATION":             9,
}

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}
func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}
func (x *ResponseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResponseType_value, data, "ResponseType")
	if err != nil {
		return err
	}
	*x = ResponseType(value)
	return nil
}
func (ResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type RoutingStatus int32

const (
	RoutingStatus_reached   RoutingStatus = 0
	RoutingStatus_unreached RoutingStatus = 1
	RoutingStatus_unknown   RoutingStatus = 2
)

var RoutingStatus_name = map[int32]string{
	0: "reached",
	1: "unreached",
	2: "unknown",
}
var RoutingStatus_value = map[string]int32{
	"reached":   0,
	"unreached": 1,
	"unknown":   2,
}

func (x RoutingStatus) Enum() *RoutingStatus {
	p := new(RoutingStatus)
	*p = x
	return p
}
func (x RoutingStatus) String() string {
	return proto.EnumName(RoutingStatus_name, int32(x))
}
func (x *RoutingStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RoutingStatus_value, data, "RoutingStatus")
	if err != nil {
		return err
	}
	*x = RoutingStatus(value)
	return nil
}
func (RoutingStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

type ErrorErrorId int32

const (
	Error_bad_filter                ErrorErrorId = 1
	Error_unknown_api               ErrorErrorId = 2
	Error_date_out_of_bounds        ErrorErrorId = 3
	Error_unable_to_parse           ErrorErrorId = 4
	Error_bad_format                ErrorErrorId = 5
	Error_no_origin                 ErrorErrorId = 6
	Error_no_destination            ErrorErrorId = 7
	Error_no_origin_nor_destination ErrorErrorId = 8
	Error_no_solution               ErrorErrorId = 9
	Error_unknown_object            ErrorErrorId = 10
	Error_service_unavailable       ErrorErrorId = 11
	Error_invalid_protobuf_request  ErrorErrorId = 12
	Error_internal_error            ErrorErrorId = 13
)

var ErrorErrorId_name = map[int32]string{
	1:  "bad_filter",
	2:  "unknown_api",
	3:  "date_out_of_bounds",
	4:  "unable_to_parse",
	5:  "bad_format",
	6:  "no_origin",
	7:  "no_destination",
	8:  "no_origin_nor_destination",
	9:  "no_solution",
	10: "unknown_object",
	11: "service_unavailable",
	12: "invalid_protobuf_request",
	13: "internal_error",
}
var ErrorErrorId_value = map[string]int32{
	"bad_filter":                1,
	"unknown_api":               2,
	"date_out_of_bounds":        3,
	"unable_to_parse":           4,
	"bad_format":                5,
	"no_origin":                 6,
	"no_destination":            7,
	"no_origin_nor_destination": 8,
	"no_solution":               9,
	"unknown_object":            10,
	"service_unavailable":       11,
	"invalid_protobuf_request":  12,
	"internal_error":            13,
}

func (x ErrorErrorId) Enum() *ErrorErrorId {
	p := new(ErrorErrorId)
	*p = x
	return p
}
func (x ErrorErrorId) String() string {
	return proto.EnumName(ErrorErrorId_name, int32(x))
}
func (x *ErrorErrorId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorErrorId_value, data, "ErrorErrorId")
	if err != nil {
		return err
	}
	*x = ErrorErrorId(value)
	return nil
}
func (ErrorErrorId) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{34, 0} }

type PathItem struct {
	Name             *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Length           *float64 `protobuf:"fixed64,2,opt,name=length" json:"length,omitempty"`
	Direction        *int32   `protobuf:"varint,3,opt,name=direction" json:"direction,omitempty"`
	Duration         *float64 `protobuf:"fixed64,4,opt,name=duration" json:"duration,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PathItem) Reset()                    { *m = PathItem{} }
func (m *PathItem) String() string            { return proto.CompactTextString(m) }
func (*PathItem) ProtoMessage()               {}
func (*PathItem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PathItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PathItem) GetLength() float64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *PathItem) GetDirection() int32 {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return 0
}

func (m *PathItem) GetDuration() float64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

type StreetNetwork struct {
	Length           *float64             `protobuf:"fixed64,1,opt,name=length" json:"length,omitempty"`
	Duration         *float64             `protobuf:"fixed64,2,opt,name=duration" json:"duration,omitempty"`
	Mode             *StreetNetworkMode   `protobuf:"varint,3,opt,name=mode,enum=pbnavitia.StreetNetworkMode" json:"mode,omitempty"`
	PathItems        []*PathItem          `protobuf:"bytes,4,rep,name=path_items,json=pathItems" json:"path_items,omitempty"`
	Coordinates      []*GeographicalCoord `protobuf:"bytes,5,rep,name=coordinates" json:"coordinates,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *StreetNetwork) Reset()                    { *m = StreetNetwork{} }
func (m *StreetNetwork) String() string            { return proto.CompactTextString(m) }
func (*StreetNetwork) ProtoMessage()               {}
func (*StreetNetwork) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *StreetNetwork) GetLength() float64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *StreetNetwork) GetDuration() float64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *StreetNetwork) GetMode() StreetNetworkMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return StreetNetworkMode_Walking
}

func (m *StreetNetwork) GetPathItems() []*PathItem {
	if m != nil {
		return m.PathItems
	}
	return nil
}

func (m *StreetNetwork) GetCoordinates() []*GeographicalCoord {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

type PtDisplayInfo struct {
	Network          *string        `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Code             *string        `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Headsign         *string        `protobuf:"bytes,3,opt,name=headsign" json:"headsign,omitempty"`
	Direction        *string        `protobuf:"bytes,4,opt,name=direction" json:"direction,omitempty"`
	Color            *string        `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
	CommercialMode   *string        `protobuf:"bytes,6,opt,name=commercial_mode,json=commercialMode" json:"commercial_mode,omitempty"`
	PhysicalMode     *string        `protobuf:"bytes,7,opt,name=physical_mode,json=physicalMode" json:"physical_mode,omitempty"`
	Description      *string        `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	Uris             *Uris          `protobuf:"bytes,9,opt,name=uris" json:"uris,omitempty"`
	HasEquipments    *HasEquipments `protobuf:"bytes,11,opt,name=has_equipments,json=hasEquipments" json:"has_equipments,omitempty"`
	Name             *string        `protobuf:"bytes,12,opt,name=name" json:"name,omitempty"`
	Messages         []*Message     `protobuf:"bytes,13,rep,name=messages" json:"messages,omitempty"`
	ImpactUris       []string       `protobuf:"bytes,18,rep,name=impact_uris,json=impactUris" json:"impact_uris,omitempty"`
	Notes            []*Note        `protobuf:"bytes,15,rep,name=notes" json:"notes,omitempty"`
	Headsigns        []string       `protobuf:"bytes,16,rep,name=headsigns" json:"headsigns,omitempty"`
	TextColor        *string        `protobuf:"bytes,17,opt,name=text_color,json=textColor" json:"text_color,omitempty"`
	TripShortName    *string        `protobuf:"bytes,19,opt,name=trip_short_name,json=tripShortName" json:"trip_short_name,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PtDisplayInfo) Reset()                    { *m = PtDisplayInfo{} }
func (m *PtDisplayInfo) String() string            { return proto.CompactTextString(m) }
func (*PtDisplayInfo) ProtoMessage()               {}
func (*PtDisplayInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *PtDisplayInfo) GetNetwork() string {
	if m != nil && m.Network != nil {
		return *m.Network
	}
	return ""
}

func (m *PtDisplayInfo) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *PtDisplayInfo) GetHeadsign() string {
	if m != nil && m.Headsign != nil {
		return *m.Headsign
	}
	return ""
}

func (m *PtDisplayInfo) GetDirection() string {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return ""
}

func (m *PtDisplayInfo) GetColor() string {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return ""
}

func (m *PtDisplayInfo) GetTripShortName() string {
	if m != nil && m.TripShortName != nil {
		return *m.TripShortName
	}
	return ""
}

func (m *PtDisplayInfo) GetCommercialMode() string {
	if m != nil && m.CommercialMode != nil {
		return *m.CommercialMode
	}
	return ""
}

func (m *PtDisplayInfo) GetPhysicalMode() string {
	if m != nil && m.PhysicalMode != nil {
		return *m.PhysicalMode
	}
	return ""
}

func (m *PtDisplayInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *PtDisplayInfo) GetUris() *Uris {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *PtDisplayInfo) GetHasEquipments() *HasEquipments {
	if m != nil {
		return m.HasEquipments
	}
	return nil
}

func (m *PtDisplayInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PtDisplayInfo) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *PtDisplayInfo) GetImpactUris() []string {
	if m != nil {
		return m.ImpactUris
	}
	return nil
}

func (m *PtDisplayInfo) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *PtDisplayInfo) GetHeadsigns() []string {
	if m != nil {
		return m.Headsigns
	}
	return nil
}

func (m *PtDisplayInfo) GetTextColor() string {
	if m != nil && m.TextColor != nil {
		return *m.TextColor
	}
	return ""
}

type Uris struct {
	Company          *string `protobuf:"bytes,1,opt,name=company" json:"company,omitempty"`
	VehicleJourney   *string `protobuf:"bytes,2,opt,name=vehicle_journey,json=vehicleJourney" json:"vehicle_journey,omitempty"`
	Line             *string `protobuf:"bytes,3,opt,name=line" json:"line,omitempty"`
	Route            *string `protobuf:"bytes,4,opt,name=route" json:"route,omitempty"`
	CommercialMode   *string `protobuf:"bytes,5,opt,name=commercial_mode,json=commercialMode" json:"commercial_mode,omitempty"`
	PhysicalMode     *string `protobuf:"bytes,6,opt,name=physical_mode,json=physicalMode" json:"physical_mode,omitempty"`
	Network          *string `protobuf:"bytes,7,opt,name=network" json:"network,omitempty"`
	Note             *string `protobuf:"bytes,8,opt,name=note" json:"note,omitempty"`
	JourneyPattern   *string `protobuf:"bytes,9,opt,name=journey_pattern,json=journeyPattern" json:"journey_pattern,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Uris) Reset()                    { *m = Uris{} }
func (m *Uris) String() string            { return proto.CompactTextString(m) }
func (*Uris) ProtoMessage()               {}
func (*Uris) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Uris) GetCompany() string {
	if m != nil && m.Company != nil {
		return *m.Company
	}
	return ""
}

func (m *Uris) GetVehicleJourney() string {
	if m != nil && m.VehicleJourney != nil {
		return *m.VehicleJourney
	}
	return ""
}

func (m *Uris) GetLine() string {
	if m != nil && m.Line != nil {
		return *m.Line
	}
	return ""
}

func (m *Uris) GetRoute() string {
	if m != nil && m.Route != nil {
		return *m.Route
	}
	return ""
}

func (m *Uris) GetCommercialMode() string {
	if m != nil && m.CommercialMode != nil {
		return *m.CommercialMode
	}
	return ""
}

func (m *Uris) GetPhysicalMode() string {
	if m != nil && m.PhysicalMode != nil {
		return *m.PhysicalMode
	}
	return ""
}

func (m *Uris) GetNetwork() string {
	if m != nil && m.Network != nil {
		return *m.Network
	}
	return ""
}

func (m *Uris) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *Uris) GetJourneyPattern() string {
	if m != nil && m.JourneyPattern != nil {
		return *m.JourneyPattern
	}
	return ""
}

type Cost struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Currency         *string  `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Cost) Reset()                    { *m = Cost{} }
func (m *Cost) String() string            { return proto.CompactTextString(m) }
func (*Cost) ProtoMessage()               {}
func (*Cost) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Cost) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *Cost) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

type Ticket struct {
	Id               *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Cost             *Cost    `protobuf:"bytes,3,opt,name=cost" json:"cost,omitempty"`
	SectionId        []string `protobuf:"bytes,4,rep,name=section_id,json=sectionId" json:"section_id,omitempty"`
	Found            *bool    `protobuf:"varint,5,opt,name=found" json:"found,omitempty"`
	Comment          *string  `protobuf:"bytes,6,opt,name=comment" json:"comment,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Ticket) Reset()                    { *m = Ticket{} }
func (m *Ticket) String() string            { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()               {}
func (*Ticket) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Ticket) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Ticket) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Ticket) GetCost() *Cost {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *Ticket) GetSectionId() []string {
	if m != nil {
		return m.SectionId
	}
	return nil
}

func (m *Ticket) GetFound() bool {
	if m != nil && m.Found != nil {
		return *m.Found
	}
	return false
}

func (m *Ticket) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

type Fare struct {
	Total            *Cost    `protobuf:"bytes,1,opt,name=total" json:"total,omitempty"`
	TicketId         []string `protobuf:"bytes,2,rep,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	Found            *bool    `protobuf:"varint,3,opt,name=found" json:"found,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Fare) Reset()                    { *m = Fare{} }
func (m *Fare) String() string            { return proto.CompactTextString(m) }
func (*Fare) ProtoMessage()               {}
func (*Fare) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Fare) GetTotal() *Cost {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *Fare) GetTicketId() []string {
	if m != nil {
		return m.TicketId
	}
	return nil
}

func (m *Fare) GetFound() bool {
	if m != nil && m.Found != nil {
		return *m.Found
	}
	return false
}

type Co2Emission struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Unit             *string  `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Co2Emission) Reset()                    { *m = Co2Emission{} }
func (m *Co2Emission) String() string            { return proto.CompactTextString(m) }
func (*Co2Emission) ProtoMessage()               {}
func (*Co2Emission) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Co2Emission) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *Co2Emission) GetUnit() string {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return ""
}

type Durations struct {
	Total            *int32 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Walking          *int32 `protobuf:"varint,2,opt,name=walking" json:"walking,omitempty"`
	Bike             *int32 `protobuf:"varint,3,opt,name=bike" json:"bike,omitempty"`
	Car              *int32 `protobuf:"varint,4,opt,name=car" json:"car,omitempty"`
	Ridesharing      *int32 `protobuf:"varint,5,opt,name=ridesharing" json:"ridesharing,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Durations) Reset()                    { *m = Durations{} }
func (m *Durations) String() string            { return proto.CompactTextString(m) }
func (*Durations) ProtoMessage()               {}
func (*Durations) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *Durations) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *Durations) GetWalking() int32 {
	if m != nil && m.Walking != nil {
		return *m.Walking
	}
	return 0
}

func (m *Durations) GetBike() int32 {
	if m != nil && m.Bike != nil {
		return *m.Bike
	}
	return 0
}

func (m *Durations) GetCar() int32 {
	if m != nil && m.Car != nil {
		return *m.Car
	}
	return 0
}

func (m *Durations) GetRidesharing() int32 {
	if m != nil && m.Ridesharing != nil {
		return *m.Ridesharing
	}
	return 0
}

type Distances struct {
	Walking          *int32 `protobuf:"varint,1,opt,name=walking" json:"walking,omitempty"`
	Bike             *int32 `protobuf:"varint,2,opt,name=bike" json:"bike,omitempty"`
	Car              *int32 `protobuf:"varint,3,opt,name=car" json:"car,omitempty"`
	Ridesharing      *int32 `protobuf:"varint,4,opt,name=ridesharing" json:"ridesharing,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Distances) Reset()                    { *m = Distances{} }
func (m *Distances) String() string            { return proto.CompactTextString(m) }
func (*Distances) ProtoMessage()               {}
func (*Distances) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *Distances) GetWalking() int32 {
	if m != nil && m.Walking != nil {
		return *m.Walking
	}
	return 0
}

func (m *Distances) GetBike() int32 {
	if m != nil && m.Bike != nil {
		return *m.Bike
	}
	return 0
}

func (m *Distances) GetCar() int32 {
	if m != nil && m.Car != nil {
		return *m.Car
	}
	return 0
}

func (m *Distances) GetRidesharing() int32 {
	if m != nil && m.Ridesharing != nil {
		return *m.Ridesharing
	}
	return 0
}

type IndividualRating struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Count            *uint32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	ScaleMin         *float64 `protobuf:"fixed64,3,opt,name=scale_min,json=scaleMin" json:"scale_min,omitempty"`
	ScaleMax         *float64 `protobuf:"fixed64,4,opt,name=scale_max,json=scaleMax" json:"scale_max,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IndividualRating) Reset()                    { *m = IndividualRating{} }
func (m *IndividualRating) String() string            { return proto.CompactTextString(m) }
func (*IndividualRating) ProtoMessage()               {}
func (*IndividualRating) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *IndividualRating) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *IndividualRating) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *IndividualRating) GetScaleMin() float64 {
	if m != nil && m.ScaleMin != nil {
		return *m.ScaleMin
	}
	return 0
}

func (m *IndividualRating) GetScaleMax() float64 {
	if m != nil && m.ScaleMax != nil {
		return *m.ScaleMax
	}
	return 0
}

type IndividualInformation struct {
	Alias            *string           `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Image            *string           `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Gender           *GenderType       `protobuf:"varint,3,opt,name=gender,enum=pbnavitia.GenderType" json:"gender,omitempty"`
	Rating           *IndividualRating `protobuf:"bytes,4,opt,name=rating" json:"rating,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *IndividualInformation) Reset()                    { *m = IndividualInformation{} }
func (m *IndividualInformation) String() string            { return proto.CompactTextString(m) }
func (*IndividualInformation) ProtoMessage()               {}
func (*IndividualInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *IndividualInformation) GetAlias() string {
	if m != nil && m.Alias != nil {
		return *m.Alias
	}
	return ""
}

func (m *IndividualInformation) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *IndividualInformation) GetGender() GenderType {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return GenderType_FEMALE
}

func (m *IndividualInformation) GetRating() *IndividualRating {
	if m != nil {
		return m.Rating
	}
	return nil
}

type SeatsDescription struct {
	Total            *uint32 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Available        *uint32 `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SeatsDescription) Reset()                    { *m = SeatsDescription{} }
func (m *SeatsDescription) String() string            { return proto.CompactTextString(m) }
func (*SeatsDescription) ProtoMessage()               {}
func (*SeatsDescription) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *SeatsDescription) GetTotal() uint32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *SeatsDescription) GetAvailable() uint32 {
	if m != nil && m.Available != nil {
		return *m.Available
	}
	return 0
}

type ExternalLink struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Href             *string `protobuf:"bytes,2,opt,name=href" json:"href,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExternalLink) Reset()                    { *m = ExternalLink{} }
func (m *ExternalLink) String() string            { return proto.CompactTextString(m) }
func (*ExternalLink) ProtoMessage()               {}
func (*ExternalLink) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *ExternalLink) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ExternalLink) GetHref() string {
	if m != nil && m.Href != nil {
		return *m.Href
	}
	return ""
}

type RidesharingInformation struct {
	Operator         *string                `protobuf:"bytes,1,opt,name=operator" json:"operator,omitempty"`
	Network          *string                `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	Driver           *IndividualInformation `protobuf:"bytes,3,opt,name=driver" json:"driver,omitempty"`
	Seats            *SeatsDescription      `protobuf:"bytes,4,opt,name=seats" json:"seats,omitempty"`
	Links            []*ExternalLink        `protobuf:"bytes,5,rep,name=links" json:"links,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *RidesharingInformation) Reset()                    { *m = RidesharingInformation{} }
func (m *RidesharingInformation) String() string            { return proto.CompactTextString(m) }
func (*RidesharingInformation) ProtoMessage()               {}
func (*RidesharingInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *RidesharingInformation) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *RidesharingInformation) GetNetwork() string {
	if m != nil && m.Network != nil {
		return *m.Network
	}
	return ""
}

func (m *RidesharingInformation) GetDriver() *IndividualInformation {
	if m != nil {
		return m.Driver
	}
	return nil
}

func (m *RidesharingInformation) GetSeats() *SeatsDescription {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *RidesharingInformation) GetLinks() []*ExternalLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type FeedPublisher struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url              *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	License          *string `protobuf:"bytes,4,opt,name=license" json:"license,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FeedPublisher) Reset()                    { *m = FeedPublisher{} }
func (m *FeedPublisher) String() string            { return proto.CompactTextString(m) }
func (*FeedPublisher) ProtoMessage()               {}
func (*FeedPublisher) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *FeedPublisher) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *FeedPublisher) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FeedPublisher) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *FeedPublisher) GetLicense() string {
	if m != nil && m.License != nil {
		return *m.License
	}
	return ""
}

type Section struct {
	Type        *SectionType `protobuf:"varint,1,opt,name=type,enum=pbnavitia.SectionType" json:"type,omitempty"`
	Origin      *PtObject    `protobuf:"bytes,2,opt,name=origin" json:"origin,omitempty"`
	Destination *PtObject    `protobuf:"bytes,3,opt,name=destination" json:"destination,omitempty"`
	// Si c'est du TC
	PtDisplayInformations *PtDisplayInfo  `protobuf:"bytes,4,opt,name=pt_display_informations,json=ptDisplayInformations" json:"pt_display_informations,omitempty"`
	Uris                  *Uris           `protobuf:"bytes,5,opt,name=uris" json:"uris,omitempty"`
	VehicleJourney        *VehicleJourney `protobuf:"bytes,9,opt,name=vehicle_journey,json=vehicleJourney" json:"vehicle_journey,omitempty"`
	StopDateTimes         []*StopDateTime `protobuf:"bytes,10,rep,name=stop_date_times,json=stopDateTimes" json:"stop_date_times,omitempty"`
	// Si c'est du routier
	StreetNetwork *StreetNetwork `protobuf:"bytes,12,opt,name=street_network,json=streetNetwork" json:"street_network,omitempty"`
	// Si c'est de l'attente
	TransferType *TransferType `protobuf:"varint,13,opt,name=transfer_type,json=transferType,enum=pbnavitia.TransferType" json:"transfer_type,omitempty"`
	// If it is crowfly ridesharing (top-level)
	RidesharingJourneys []*Journey `protobuf:"bytes,28,rep,name=ridesharing_journeys,json=ridesharingJourneys" json:"ridesharing_journeys,omitempty"`
	// If it is ridesharing section (low-level)
	RidesharingInformation *RidesharingInformation `protobuf:"bytes,29,opt,name=ridesharing_information,json=ridesharingInformation" json:"ridesharing_information,omitempty"`
	// Dans tous les cas
	Shape                  []*GeographicalCoord               `protobuf:"bytes,24,rep,name=shape" json:"shape,omitempty"`
	Duration               *int32                             `protobuf:"varint,15,opt,name=duration" json:"duration,omitempty"`
	BeginDateTime          *uint64                            `protobuf:"varint,16,opt,name=begin_date_time,json=beginDateTime" json:"begin_date_time,omitempty"`
	EndDateTime            *uint64                            `protobuf:"varint,17,opt,name=end_date_time,json=endDateTime" json:"end_date_time,omitempty"`
	BaseBeginDateTime      *uint64                            `protobuf:"varint,25,opt,name=base_begin_date_time,json=baseBeginDateTime" json:"base_begin_date_time,omitempty"`
	BaseEndDateTime        *uint64                            `protobuf:"varint,26,opt,name=base_end_date_time,json=baseEndDateTime" json:"base_end_date_time,omitempty"`
	RealtimeLevel          *RTLevel                           `protobuf:"varint,27,opt,name=realtime_level,json=realtimeLevel,enum=pbnavitia.RTLevel" json:"realtime_level,omitempty"`
	Length                 *int32                             `protobuf:"varint,19,opt,name=length" json:"length,omitempty"`
	Id                     *string                            `protobuf:"bytes,20,opt,name=id" json:"id,omitempty"`
	Co2Emission            *Co2Emission                       `protobuf:"bytes,21,opt,name=co2_emission,json=co2Emission" json:"co2_emission,omitempty"`
	AdditionalInformations []SectionAdditionalInformationType `protobuf:"varint,22,rep,name=additional_informations,json=additionalInformations,enum=pbnavitia.SectionAdditionalInformationType" json:"additional_informations,omitempty"`
	XXX_unrecognized       []byte                             `json:"-"`
}

func (m *Section) Reset()                    { *m = Section{} }
func (m *Section) String() string            { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()               {}
func (*Section) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *Section) GetType() SectionType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SectionType_PUBLIC_TRANSPORT
}

func (m *Section) GetOrigin() *PtObject {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *Section) GetDestination() *PtObject {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *Section) GetPtDisplayInformations() *PtDisplayInfo {
	if m != nil {
		return m.PtDisplayInformations
	}
	return nil
}

func (m *Section) GetUris() *Uris {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *Section) GetVehicleJourney() *VehicleJourney {
	if m != nil {
		return m.VehicleJourney
	}
	return nil
}

func (m *Section) GetStopDateTimes() []*StopDateTime {
	if m != nil {
		return m.StopDateTimes
	}
	return nil
}

func (m *Section) GetStreetNetwork() *StreetNetwork {
	if m != nil {
		return m.StreetNetwork
	}
	return nil
}

func (m *Section) GetTransferType() TransferType {
	if m != nil && m.TransferType != nil {
		return *m.TransferType
	}
	return TransferType_walking
}

func (m *Section) GetRidesharingJourneys() []*Journey {
	if m != nil {
		return m.RidesharingJourneys
	}
	return nil
}

func (m *Section) GetRidesharingInformation() *RidesharingInformation {
	if m != nil {
		return m.RidesharingInformation
	}
	return nil
}

func (m *Section) GetShape() []*GeographicalCoord {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Section) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Section) GetBeginDateTime() uint64 {
	if m != nil && m.BeginDateTime != nil {
		return *m.BeginDateTime
	}
	return 0
}

func (m *Section) GetEndDateTime() uint64 {
	if m != nil && m.EndDateTime != nil {
		return *m.EndDateTime
	}
	return 0
}

func (m *Section) GetBaseBeginDateTime() uint64 {
	if m != nil && m.BaseBeginDateTime != nil {
		return *m.BaseBeginDateTime
	}
	return 0
}

func (m *Section) GetBaseEndDateTime() uint64 {
	if m != nil && m.BaseEndDateTime != nil {
		return *m.BaseEndDateTime
	}
	return 0
}

func (m *Section) GetRealtimeLevel() RTLevel {
	if m != nil && m.RealtimeLevel != nil {
		return *m.RealtimeLevel
	}
	return RTLevel_BASE_SCHEDULE
}

func (m *Section) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *Section) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Section) GetCo2Emission() *Co2Emission {
	if m != nil {
		return m.Co2Emission
	}
	return nil
}

func (m *Section) GetAdditionalInformations() []SectionAdditionalInformationType {
	if m != nil {
		return m.AdditionalInformations
	}
	return nil
}

type Journey struct {
	// TODO: to be deleted after implemenation of durations
	Duration                    *int32       `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	NbTransfers                 *int32       `protobuf:"varint,2,opt,name=nb_transfers,json=nbTransfers" json:"nb_transfers,omitempty"`
	DepartureDateTime           *uint64      `protobuf:"varint,3,opt,name=departure_date_time,json=departureDateTime" json:"departure_date_time,omitempty"`
	ArrivalDateTime             *uint64      `protobuf:"varint,4,opt,name=arrival_date_time,json=arrivalDateTime" json:"arrival_date_time,omitempty"`
	RequestedDateTime           *uint64      `protobuf:"varint,5,opt,name=requested_date_time,json=requestedDateTime" json:"requested_date_time,omitempty"`
	Sections                    []*Section   `protobuf:"bytes,6,rep,name=sections" json:"sections,omitempty"`
	Origin                      *PtObject    `protobuf:"bytes,7,opt,name=origin" json:"origin,omitempty"`
	Destination                 *PtObject    `protobuf:"bytes,8,opt,name=destination" json:"destination,omitempty"`
	Type                        *string      `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
	Fare                        *Fare        `protobuf:"bytes,10,opt,name=fare" json:"fare,omitempty"`
	Tags                        []string     `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	Calendars                   []*Calendar  `protobuf:"bytes,12,rep,name=calendars" json:"calendars,omitempty"`
	Co2Emission                 *Co2Emission `protobuf:"bytes,13,opt,name=co2_emission,json=co2Emission" json:"co2_emission,omitempty"`
	MostSeriousDisruptionEffect *string      `protobuf:"bytes,14,opt,name=most_serious_disruption_effect,json=mostSeriousDisruptionEffect" json:"most_serious_disruption_effect,omitempty"`
	InternalId                  *string      `protobuf:"bytes,15,opt,name=internal_id,json=internalId" json:"internal_id,omitempty"`
	SnDur                       *uint64      `protobuf:"varint,16,opt,name=sn_dur,json=snDur" json:"sn_dur,omitempty"`
	TransferDur                 *uint64      `protobuf:"varint,17,opt,name=transfer_dur,json=transferDur" json:"transfer_dur,omitempty"`
	MinWaitingDur               *uint64      `protobuf:"varint,18,opt,name=min_waiting_dur,json=minWaitingDur" json:"min_waiting_dur,omitempty"`
	NbVjExtentions              *uint32      `protobuf:"varint,19,opt,name=nb_vj_extentions,json=nbVjExtentions" json:"nb_vj_extentions,omitempty"`
	NbSections                  *uint32      `protobuf:"varint,20,opt,name=nb_sections,json=nbSections" json:"nb_sections,omitempty"`
	Durations                   *Durations   `protobuf:"bytes,21,opt,name=durations" json:"durations,omitempty"`
	Distances                   *Distances   `protobuf:"bytes,22,opt,name=distances" json:"distances,omitempty"`
	XXX_unrecognized            []byte       `json:"-"`
}

func (m *Journey) Reset()                    { *m = Journey{} }
func (m *Journey) String() string            { return proto.CompactTextString(m) }
func (*Journey) ProtoMessage()               {}
func (*Journey) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *Journey) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Journey) GetNbTransfers() int32 {
	if m != nil && m.NbTransfers != nil {
		return *m.NbTransfers
	}
	return 0
}

func (m *Journey) GetDepartureDateTime() uint64 {
	if m != nil && m.DepartureDateTime != nil {
		return *m.DepartureDateTime
	}
	return 0
}

func (m *Journey) GetArrivalDateTime() uint64 {
	if m != nil && m.ArrivalDateTime != nil {
		return *m.ArrivalDateTime
	}
	return 0
}

func (m *Journey) GetRequestedDateTime() uint64 {
	if m != nil && m.RequestedDateTime != nil {
		return *m.RequestedDateTime
	}
	return 0
}

func (m *Journey) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Journey) GetOrigin() *PtObject {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *Journey) GetDestination() *PtObject {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *Journey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Journey) GetFare() *Fare {
	if m != nil {
		return m.Fare
	}
	return nil
}

func (m *Journey) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Journey) GetCalendars() []*Calendar {
	if m != nil {
		return m.Calendars
	}
	return nil
}

func (m *Journey) GetCo2Emission() *Co2Emission {
	if m != nil {
		return m.Co2Emission
	}
	return nil
}

func (m *Journey) GetMostSeriousDisruptionEffect() string {
	if m != nil && m.MostSeriousDisruptionEffect != nil {
		return *m.MostSeriousDisruptionEffect
	}
	return ""
}

func (m *Journey) GetInternalId() string {
	if m != nil && m.InternalId != nil {
		return *m.InternalId
	}
	return ""
}

func (m *Journey) GetSnDur() uint64 {
	if m != nil && m.SnDur != nil {
		return *m.SnDur
	}
	return 0
}

func (m *Journey) GetTransferDur() uint64 {
	if m != nil && m.TransferDur != nil {
		return *m.TransferDur
	}
	return 0
}

func (m *Journey) GetMinWaitingDur() uint64 {
	if m != nil && m.MinWaitingDur != nil {
		return *m.MinWaitingDur
	}
	return 0
}

func (m *Journey) GetNbVjExtentions() uint32 {
	if m != nil && m.NbVjExtentions != nil {
		return *m.NbVjExtentions
	}
	return 0
}

func (m *Journey) GetNbSections() uint32 {
	if m != nil && m.NbSections != nil {
		return *m.NbSections
	}
	return 0
}

func (m *Journey) GetDurations() *Durations {
	if m != nil {
		return m.Durations
	}
	return nil
}

func (m *Journey) GetDistances() *Distances {
	if m != nil {
		return m.Distances
	}
	return nil
}

type Planner struct {
	Journeys         []*Journey    `protobuf:"bytes,1,rep,name=journeys" json:"journeys,omitempty"`
	ResponseType     *ResponseType `protobuf:"varint,2,opt,name=response_type,json=responseType,enum=pbnavitia.ResponseType" json:"response_type,omitempty"`
	Before           *string       `protobuf:"bytes,3,opt,name=before" json:"before,omitempty"`
	After            *string       `protobuf:"bytes,4,opt,name=after" json:"after,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Planner) Reset()                    { *m = Planner{} }
func (m *Planner) String() string            { return proto.CompactTextString(m) }
func (*Planner) ProtoMessage()               {}
func (*Planner) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *Planner) GetJourneys() []*Journey {
	if m != nil {
		return m.Journeys
	}
	return nil
}

func (m *Planner) GetResponseType() ResponseType {
	if m != nil && m.ResponseType != nil {
		return *m.ResponseType
	}
	return ResponseType_ITINERARY_FOUND
}

func (m *Planner) GetBefore() string {
	if m != nil && m.Before != nil {
		return *m.Before
	}
	return ""
}

func (m *Planner) GetAfter() string {
	if m != nil && m.After != nil {
		return *m.After
	}
	return ""
}

type GeoStatus struct {
	StreetNetworkSource *string `protobuf:"bytes,1,opt,name=street_network_source,json=streetNetworkSource" json:"street_network_source,omitempty"`
	NbAdmins            *int32  `protobuf:"varint,2,opt,name=nb_admins,json=nbAdmins" json:"nb_admins,omitempty"`
	NbAdminsFromCities  *int32  `protobuf:"varint,3,opt,name=nb_admins_from_cities,json=nbAdminsFromCities" json:"nb_admins_from_cities,omitempty"`
	NbWays              *int32  `protobuf:"varint,4,opt,name=nb_ways,json=nbWays" json:"nb_ways,omitempty"`
	NbAddresses         *int32  `protobuf:"varint,5,opt,name=nb_addresses,json=nbAddresses" json:"nb_addresses,omitempty"`
	NbPoi               *int32  `protobuf:"varint,6,opt,name=nb_poi,json=nbPoi" json:"nb_poi,omitempty"`
	PoiSource           *string `protobuf:"bytes,7,opt,name=poi_source,json=poiSource" json:"poi_source,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *GeoStatus) Reset()                    { *m = GeoStatus{} }
func (m *GeoStatus) String() string            { return proto.CompactTextString(m) }
func (*GeoStatus) ProtoMessage()               {}
func (*GeoStatus) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *GeoStatus) GetStreetNetworkSource() string {
	if m != nil && m.StreetNetworkSource != nil {
		return *m.StreetNetworkSource
	}
	return ""
}

func (m *GeoStatus) GetNbAdmins() int32 {
	if m != nil && m.NbAdmins != nil {
		return *m.NbAdmins
	}
	return 0
}

func (m *GeoStatus) GetNbAdminsFromCities() int32 {
	if m != nil && m.NbAdminsFromCities != nil {
		return *m.NbAdminsFromCities
	}
	return 0
}

func (m *GeoStatus) GetNbWays() int32 {
	if m != nil && m.NbWays != nil {
		return *m.NbWays
	}
	return 0
}

func (m *GeoStatus) GetNbAddresses() int32 {
	if m != nil && m.NbAddresses != nil {
		return *m.NbAddresses
	}
	return 0
}

func (m *GeoStatus) GetNbPoi() int32 {
	if m != nil && m.NbPoi != nil {
		return *m.NbPoi
	}
	return 0
}

func (m *GeoStatus) GetPoiSource() string {
	if m != nil && m.PoiSource != nil {
		return *m.PoiSource
	}
	return ""
}

type Status struct {
	PublicationDate       *string  `protobuf:"bytes,1,req,name=publication_date,json=publicationDate" json:"publication_date,omitempty"`
	StartProductionDate   *string  `protobuf:"bytes,2,req,name=start_production_date,json=startProductionDate" json:"start_production_date,omitempty"`
	EndProductionDate     *string  `protobuf:"bytes,3,req,name=end_production_date,json=endProductionDate" json:"end_production_date,omitempty"`
	DataVersion           *int32   `protobuf:"varint,4,opt,name=data_version,json=dataVersion" json:"data_version,omitempty"`
	NavitiaVersion        *string  `protobuf:"bytes,6,opt,name=navitia_version,json=navitiaVersion" json:"navitia_version,omitempty"`
	DataSources           []string `protobuf:"bytes,7,rep,name=data_sources,json=dataSources" json:"data_sources,omitempty"`
	LastLoadAt            *string  `protobuf:"bytes,8,opt,name=last_load_at,json=lastLoadAt" json:"last_load_at,omitempty"`
	LastLoadStatus        *bool    `protobuf:"varint,9,opt,name=last_load_status,json=lastLoadStatus" json:"last_load_status,omitempty"`
	Loaded                *bool    `protobuf:"varint,10,opt,name=loaded" json:"loaded,omitempty"`
	NbThreads             *int32   `protobuf:"varint,11,opt,name=nb_threads,json=nbThreads" json:"nb_threads,omitempty"`
	IsConnectedToRabbitmq *bool    `protobuf:"varint,12,opt,name=is_connected_to_rabbitmq,json=isConnectedToRabbitmq" json:"is_connected_to_rabbitmq,omitempty"`
	Status                *string  `protobuf:"bytes,13,opt,name=status" json:"status,omitempty"`
	LastRtDataLoaded      *string  `protobuf:"bytes,14,opt,name=last_rt_data_loaded,json=lastRtDataLoaded" json:"last_rt_data_loaded,omitempty"`
	IsRealtimeLoaded      *bool    `protobuf:"varint,16,opt,name=is_realtime_loaded,json=isRealtimeLoaded" json:"is_realtime_loaded,omitempty"`
	DatasetCreatedAt      *string  `protobuf:"bytes,17,opt,name=dataset_created_at,json=datasetCreatedAt" json:"dataset_created_at,omitempty"`
	RtContributors        []string `protobuf:"bytes,18,rep,name=rt_contributors,json=rtContributors" json:"rt_contributors,omitempty"`
	DisruptionError       *bool    `protobuf:"varint,19,opt,name=disruption_error,json=disruptionError" json:"disruption_error,omitempty"`
	XXX_unrecognized      []byte   `json:"-"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *Status) GetPublicationDate() string {
	if m != nil && m.PublicationDate != nil {
		return *m.PublicationDate
	}
	return ""
}

func (m *Status) GetStartProductionDate() string {
	if m != nil && m.StartProductionDate != nil {
		return *m.StartProductionDate
	}
	return ""
}

func (m *Status) GetEndProductionDate() string {
	if m != nil && m.EndProductionDate != nil {
		return *m.EndProductionDate
	}
	return ""
}

func (m *Status) GetDataVersion() int32 {
	if m != nil && m.DataVersion != nil {
		return *m.DataVersion
	}
	return 0
}

func (m *Status) GetNavitiaVersion() string {
	if m != nil && m.NavitiaVersion != nil {
		return *m.NavitiaVersion
	}
	return ""
}

func (m *Status) GetDataSources() []string {
	if m != nil {
		return m.DataSources
	}
	return nil
}

func (m *Status) GetLastLoadAt() string {
	if m != nil && m.LastLoadAt != nil {
		return *m.LastLoadAt
	}
	return ""
}

func (m *Status) GetLastLoadStatus() bool {
	if m != nil && m.LastLoadStatus != nil {
		return *m.LastLoadStatus
	}
	return false
}

func (m *Status) GetLoaded() bool {
	if m != nil && m.Loaded != nil {
		return *m.Loaded
	}
	return false
}

func (m *Status) GetNbThreads() int32 {
	if m != nil && m.NbThreads != nil {
		return *m.NbThreads
	}
	return 0
}

func (m *Status) GetIsConnectedToRabbitmq() bool {
	if m != nil && m.IsConnectedToRabbitmq != nil {
		return *m.IsConnectedToRabbitmq
	}
	return false
}

func (m *Status) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Status) GetLastRtDataLoaded() string {
	if m != nil && m.LastRtDataLoaded != nil {
		return *m.LastRtDataLoaded
	}
	return ""
}

func (m *Status) GetIsRealtimeLoaded() bool {
	if m != nil && m.IsRealtimeLoaded != nil {
		return *m.IsRealtimeLoaded
	}
	return false
}

func (m *Status) GetDatasetCreatedAt() string {
	if m != nil && m.DatasetCreatedAt != nil {
		return *m.DatasetCreatedAt
	}
	return ""
}

func (m *Status) GetRtContributors() []string {
	if m != nil {
		return m.RtContributors
	}
	return nil
}

func (m *Status) GetDisruptionError() bool {
	if m != nil && m.DisruptionError != nil {
		return *m.DisruptionError
	}
	return false
}

type ScheduleStopTime struct {
	Properties *Properties `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
	// date time is split because sometimes
	// we want only time and no dates for the schedule
	// Note: to define a null schedule time, time must be equal to it's max value (max uint64 value)
	Time             *uint64         `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Date             *uint64         `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	DtStatus         *ResponseStatus `protobuf:"varint,5,opt,name=dt_status,json=dtStatus,enum=pbnavitia.ResponseStatus" json:"dt_status,omitempty"`
	RealtimeLevel    *RTLevel        `protobuf:"varint,6,opt,name=realtime_level,json=realtimeLevel,enum=pbnavitia.RTLevel" json:"realtime_level,omitempty"`
	BaseDateTime     *uint64         `protobuf:"varint,7,opt,name=base_date_time,json=baseDateTime" json:"base_date_time,omitempty"`
	ImpactUris       []string        `protobuf:"bytes,8,rep,name=impact_uris,json=impactUris" json:"impact_uris,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ScheduleStopTime) Reset()                    { *m = ScheduleStopTime{} }
func (m *ScheduleStopTime) String() string            { return proto.CompactTextString(m) }
func (*ScheduleStopTime) ProtoMessage()               {}
func (*ScheduleStopTime) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *ScheduleStopTime) GetProperties() *Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *ScheduleStopTime) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *ScheduleStopTime) GetDate() uint64 {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return 0
}

func (m *ScheduleStopTime) GetDtStatus() ResponseStatus {
	if m != nil && m.DtStatus != nil {
		return *m.DtStatus
	}
	return ResponseStatus_none
}

func (m *ScheduleStopTime) GetRealtimeLevel() RTLevel {
	if m != nil && m.RealtimeLevel != nil {
		return *m.RealtimeLevel
	}
	return RTLevel_BASE_SCHEDULE
}

func (m *ScheduleStopTime) GetBaseDateTime() uint64 {
	if m != nil && m.BaseDateTime != nil {
		return *m.BaseDateTime
	}
	return 0
}

func (m *ScheduleStopTime) GetImpactUris() []string {
	if m != nil {
		return m.ImpactUris
	}
	return nil
}

type RouteScheduleRow struct {
	StopPoint        *StopPoint          `protobuf:"bytes,1,req,name=stop_point,json=stopPoint" json:"stop_point,omitempty"`
	DateTimes        []*ScheduleStopTime `protobuf:"bytes,2,rep,name=date_times,json=dateTimes" json:"date_times,omitempty"`
	StopTimes        []string            `protobuf:"bytes,3,rep,name=stop_times,json=stopTimes" json:"stop_times,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *RouteScheduleRow) Reset()                    { *m = RouteScheduleRow{} }
func (m *RouteScheduleRow) String() string            { return proto.CompactTextString(m) }
func (*RouteScheduleRow) ProtoMessage()               {}
func (*RouteScheduleRow) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *RouteScheduleRow) GetStopPoint() *StopPoint {
	if m != nil {
		return m.StopPoint
	}
	return nil
}

func (m *RouteScheduleRow) GetDateTimes() []*ScheduleStopTime {
	if m != nil {
		return m.DateTimes
	}
	return nil
}

func (m *RouteScheduleRow) GetStopTimes() []string {
	if m != nil {
		return m.StopTimes
	}
	return nil
}

type Header struct {
	PtDisplayInformations  *PtDisplayInfo                     `protobuf:"bytes,1,req,name=pt_display_informations,json=ptDisplayInformations" json:"pt_display_informations,omitempty"`
	AdditionalInformations []SectionAdditionalInformationType `protobuf:"varint,3,rep,name=additional_informations,json=additionalInformations,enum=pbnavitia.SectionAdditionalInformationType" json:"additional_informations,omitempty"`
	XXX_unrecognized       []byte                             `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *Header) GetPtDisplayInformations() *PtDisplayInfo {
	if m != nil {
		return m.PtDisplayInformations
	}
	return nil
}

func (m *Header) GetAdditionalInformations() []SectionAdditionalInformationType {
	if m != nil {
		return m.AdditionalInformations
	}
	return nil
}

type Table struct {
	Rows             []*RouteScheduleRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	Headers          []*Header           `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *Table) GetRows() []*RouteScheduleRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *Table) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

type RouteSchedule struct {
	Table                 *Table           `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	PtDisplayInformations *PtDisplayInfo   `protobuf:"bytes,2,req,name=pt_display_informations,json=ptDisplayInformations" json:"pt_display_informations,omitempty"`
	Geojson               *MultiLineString `protobuf:"bytes,3,opt,name=geojson" json:"geojson,omitempty"`
	ResponseStatus        *ResponseStatus  `protobuf:"varint,4,opt,name=response_status,json=responseStatus,enum=pbnavitia.ResponseStatus" json:"response_status,omitempty"`
	XXX_unrecognized      []byte           `json:"-"`
}

func (m *RouteSchedule) Reset()                    { *m = RouteSchedule{} }
func (m *RouteSchedule) String() string            { return proto.CompactTextString(m) }
func (*RouteSchedule) ProtoMessage()               {}
func (*RouteSchedule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *RouteSchedule) GetTable() *Table {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *RouteSchedule) GetPtDisplayInformations() *PtDisplayInfo {
	if m != nil {
		return m.PtDisplayInformations
	}
	return nil
}

func (m *RouteSchedule) GetGeojson() *MultiLineString {
	if m != nil {
		return m.Geojson
	}
	return nil
}

func (m *RouteSchedule) GetResponseStatus() ResponseStatus {
	if m != nil && m.ResponseStatus != nil {
		return *m.ResponseStatus
	}
	return ResponseStatus_none
}

type Passage struct {
	StopDateTime          *StopDateTime  `protobuf:"bytes,1,req,name=stop_date_time,json=stopDateTime" json:"stop_date_time,omitempty"`
	StopPoint             *StopPoint     `protobuf:"bytes,2,req,name=stop_point,json=stopPoint" json:"stop_point,omitempty"`
	PtDisplayInformations *PtDisplayInfo `protobuf:"bytes,3,opt,name=pt_display_informations,json=ptDisplayInformations" json:"pt_display_informations,omitempty"`
	Route                 *Route         `protobuf:"bytes,4,opt,name=route" json:"route,omitempty"`
	XXX_unrecognized      []byte         `json:"-"`
}

func (m *Passage) Reset()                    { *m = Passage{} }
func (m *Passage) String() string            { return proto.CompactTextString(m) }
func (*Passage) ProtoMessage()               {}
func (*Passage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *Passage) GetStopDateTime() *StopDateTime {
	if m != nil {
		return m.StopDateTime
	}
	return nil
}

func (m *Passage) GetStopPoint() *StopPoint {
	if m != nil {
		return m.StopPoint
	}
	return nil
}

func (m *Passage) GetPtDisplayInformations() *PtDisplayInfo {
	if m != nil {
		return m.PtDisplayInformations
	}
	return nil
}

func (m *Passage) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type RoutePoint struct {
	Route                 *Route         `protobuf:"bytes,1,opt,name=route" json:"route,omitempty"`
	StopPoint             *StopPoint     `protobuf:"bytes,2,opt,name=stop_point,json=stopPoint" json:"stop_point,omitempty"`
	PtDisplayInformations *PtDisplayInfo `protobuf:"bytes,3,opt,name=pt_display_informations,json=ptDisplayInformations" json:"pt_display_informations,omitempty"`
	XXX_unrecognized      []byte         `json:"-"`
}

func (m *RoutePoint) Reset()                    { *m = RoutePoint{} }
func (m *RoutePoint) String() string            { return proto.CompactTextString(m) }
func (*RoutePoint) ProtoMessage()               {}
func (*RoutePoint) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *RoutePoint) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *RoutePoint) GetStopPoint() *StopPoint {
	if m != nil {
		return m.StopPoint
	}
	return nil
}

func (m *RoutePoint) GetPtDisplayInformations() *PtDisplayInfo {
	if m != nil {
		return m.PtDisplayInformations
	}
	return nil
}

type BoardItem struct {
	Hour             *string  `protobuf:"bytes,1,req,name=hour" json:"hour,omitempty"`
	Minutes          []string `protobuf:"bytes,2,rep,name=minutes" json:"minutes,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BoardItem) Reset()                    { *m = BoardItem{} }
func (m *BoardItem) String() string            { return proto.CompactTextString(m) }
func (*BoardItem) ProtoMessage()               {}
func (*BoardItem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *BoardItem) GetHour() string {
	if m != nil && m.Hour != nil {
		return *m.Hour
	}
	return ""
}

func (m *BoardItem) GetMinutes() []string {
	if m != nil {
		return m.Minutes
	}
	return nil
}

type DepartureBoard struct {
	StopPoint        *StopPoint   `protobuf:"bytes,1,req,name=stop_point,json=stopPoint" json:"stop_point,omitempty"`
	Route            *Route       `protobuf:"bytes,2,req,name=route" json:"route,omitempty"`
	BoardItems       []*BoardItem `protobuf:"bytes,3,rep,name=board_items,json=boardItems" json:"board_items,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DepartureBoard) Reset()                    { *m = DepartureBoard{} }
func (m *DepartureBoard) String() string            { return proto.CompactTextString(m) }
func (*DepartureBoard) ProtoMessage()               {}
func (*DepartureBoard) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *DepartureBoard) GetStopPoint() *StopPoint {
	if m != nil {
		return m.StopPoint
	}
	return nil
}

func (m *DepartureBoard) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *DepartureBoard) GetBoardItems() []*BoardItem {
	if m != nil {
		return m.BoardItems
	}
	return nil
}

type Load struct {
	Ok               *bool  `protobuf:"varint,1,req,name=ok" json:"ok,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Load) Reset()                    { *m = Load{} }
func (m *Load) String() string            { return proto.CompactTextString(m) }
func (*Load) ProtoMessage()               {}
func (*Load) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *Load) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

type Metadatas struct {
	StartProductionDate *string  `protobuf:"bytes,1,req,name=start_production_date,json=startProductionDate" json:"start_production_date,omitempty"`
	EndProductionDate   *string  `protobuf:"bytes,2,req,name=end_production_date,json=endProductionDate" json:"end_production_date,omitempty"`
	Shape               *string  `protobuf:"bytes,3,req,name=shape" json:"shape,omitempty"`
	Status              *string  `protobuf:"bytes,4,req,name=status" json:"status,omitempty"`
	Contributors        []string `protobuf:"bytes,12,rep,name=contributors" json:"contributors,omitempty"`
	Timezone            *string  `protobuf:"bytes,13,opt,name=timezone" json:"timezone,omitempty"`
	Name                *string  `protobuf:"bytes,14,opt,name=name" json:"name,omitempty"`
	LastLoadAt          *uint64  `protobuf:"varint,15,opt,name=last_load_at,json=lastLoadAt" json:"last_load_at,omitempty"`
	DatasetCreatedAt    *string  `protobuf:"bytes,16,opt,name=dataset_created_at,json=datasetCreatedAt" json:"dataset_created_at,omitempty"`
	XXX_unrecognized    []byte   `json:"-"`
}

func (m *Metadatas) Reset()                    { *m = Metadatas{} }
func (m *Metadatas) String() string            { return proto.CompactTextString(m) }
func (*Metadatas) ProtoMessage()               {}
func (*Metadatas) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *Metadatas) GetStartProductionDate() string {
	if m != nil && m.StartProductionDate != nil {
		return *m.StartProductionDate
	}
	return ""
}

func (m *Metadatas) GetEndProductionDate() string {
	if m != nil && m.EndProductionDate != nil {
		return *m.EndProductionDate
	}
	return ""
}

func (m *Metadatas) GetShape() string {
	if m != nil && m.Shape != nil {
		return *m.Shape
	}
	return ""
}

func (m *Metadatas) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Metadatas) GetContributors() []string {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *Metadatas) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Metadatas) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Metadatas) GetLastLoadAt() uint64 {
	if m != nil && m.LastLoadAt != nil {
		return *m.LastLoadAt
	}
	return 0
}

func (m *Metadatas) GetDatasetCreatedAt() string {
	if m != nil && m.DatasetCreatedAt != nil {
		return *m.DatasetCreatedAt
	}
	return ""
}

type Pagination struct {
	TotalResult      *int32  `protobuf:"varint,1,req,name=totalResult" json:"totalResult,omitempty"`
	StartPage        *int32  `protobuf:"varint,2,req,name=startPage" json:"startPage,omitempty"`
	ItemsPerPage     *int32  `protobuf:"varint,3,req,name=itemsPerPage" json:"itemsPerPage,omitempty"`
	ItemsOnPage      *int32  `protobuf:"varint,4,req,name=itemsOnPage" json:"itemsOnPage,omitempty"`
	NextPage         *string `protobuf:"bytes,5,opt,name=nextPage" json:"nextPage,omitempty"`
	PreviousPage     *string `protobuf:"bytes,6,opt,name=previousPage" json:"previousPage,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *Pagination) GetTotalResult() int32 {
	if m != nil && m.TotalResult != nil {
		return *m.TotalResult
	}
	return 0
}

func (m *Pagination) GetStartPage() int32 {
	if m != nil && m.StartPage != nil {
		return *m.StartPage
	}
	return 0
}

func (m *Pagination) GetItemsPerPage() int32 {
	if m != nil && m.ItemsPerPage != nil {
		return *m.ItemsPerPage
	}
	return 0
}

func (m *Pagination) GetItemsOnPage() int32 {
	if m != nil && m.ItemsOnPage != nil {
		return *m.ItemsOnPage
	}
	return 0
}

func (m *Pagination) GetNextPage() string {
	if m != nil && m.NextPage != nil {
		return *m.NextPage
	}
	return ""
}

func (m *Pagination) GetPreviousPage() string {
	if m != nil && m.PreviousPage != nil {
		return *m.PreviousPage
	}
	return ""
}

type StopSchedule struct {
	Route                 *Route              `protobuf:"bytes,1,req,name=route" json:"route,omitempty"`
	PtDisplayInformations *PtDisplayInfo      `protobuf:"bytes,2,req,name=pt_display_informations,json=ptDisplayInformations" json:"pt_display_informations,omitempty"`
	StopPoint             *StopPoint          `protobuf:"bytes,3,req,name=stop_point,json=stopPoint" json:"stop_point,omitempty"`
	DateTimes             []*ScheduleStopTime `protobuf:"bytes,4,rep,name=date_times,json=dateTimes" json:"date_times,omitempty"`
	ResponseStatus        *ResponseStatus     `protobuf:"varint,5,opt,name=response_status,json=responseStatus,enum=pbnavitia.ResponseStatus" json:"response_status,omitempty"`
	XXX_unrecognized      []byte              `json:"-"`
}

func (m *StopSchedule) Reset()                    { *m = StopSchedule{} }
func (m *StopSchedule) String() string            { return proto.CompactTextString(m) }
func (*StopSchedule) ProtoMessage()               {}
func (*StopSchedule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *StopSchedule) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *StopSchedule) GetPtDisplayInformations() *PtDisplayInfo {
	if m != nil {
		return m.PtDisplayInformations
	}
	return nil
}

func (m *StopSchedule) GetStopPoint() *StopPoint {
	if m != nil {
		return m.StopPoint
	}
	return nil
}

func (m *StopSchedule) GetDateTimes() []*ScheduleStopTime {
	if m != nil {
		return m.DateTimes
	}
	return nil
}

func (m *StopSchedule) GetResponseStatus() ResponseStatus {
	if m != nil && m.ResponseStatus != nil {
		return *m.ResponseStatus
	}
	return ResponseStatus_none
}

type Error struct {
	Id               *ErrorErrorId `protobuf:"varint,1,opt,name=id,enum=pbnavitia.ErrorErrorId" json:"id,omitempty"`
	Message          *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

func (m *Error) GetId() ErrorErrorId {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return Error_bad_filter
}

func (m *Error) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type TrafficReports struct {
	Network          *Network          `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Lines            []*Line           `protobuf:"bytes,2,rep,name=lines" json:"lines,omitempty"`
	StopAreas        []*StopArea       `protobuf:"bytes,3,rep,name=stop_areas,json=stopAreas" json:"stop_areas,omitempty"`
	VehicleJourneys  []*VehicleJourney `protobuf:"bytes,4,rep,name=vehicle_journeys,json=vehicleJourneys" json:"vehicle_journeys,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TrafficReports) Reset()                    { *m = TrafficReports{} }
func (m *TrafficReports) String() string            { return proto.CompactTextString(m) }
func (*TrafficReports) ProtoMessage()               {}
func (*TrafficReports) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35} }

func (m *TrafficReports) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *TrafficReports) GetLines() []*Line {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *TrafficReports) GetStopAreas() []*StopArea {
	if m != nil {
		return m.StopAreas
	}
	return nil
}

func (m *TrafficReports) GetVehicleJourneys() []*VehicleJourney {
	if m != nil {
		return m.VehicleJourneys
	}
	return nil
}

type LineReport struct {
	Line             *Line       `protobuf:"bytes,1,opt,name=line" json:"line,omitempty"`
	PtObjects        []*PtObject `protobuf:"bytes,2,rep,name=pt_objects,json=ptObjects" json:"pt_objects,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *LineReport) Reset()                    { *m = LineReport{} }
func (m *LineReport) String() string            { return proto.CompactTextString(m) }
func (*LineReport) ProtoMessage()               {}
func (*LineReport) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{36} }

func (m *LineReport) GetLine() *Line {
	if m != nil {
		return m.Line
	}
	return nil
}

func (m *LineReport) GetPtObjects() []*PtObject {
	if m != nil {
		return m.PtObjects
	}
	return nil
}

type LinkArgs struct {
	// it's uggly but since some link are computed with the protobuf, we need some dict-like
	// structure to compute the real link url later (it depends on the API version)
	Key              *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Values           []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LinkArgs) Reset()                    { *m = LinkArgs{} }
func (m *LinkArgs) String() string            { return proto.CompactTextString(m) }
func (*LinkArgs) ProtoMessage()               {}
func (*LinkArgs) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{37} }

func (m *LinkArgs) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LinkArgs) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Link struct {
	Rel              *string     `protobuf:"bytes,1,opt,name=rel" json:"rel,omitempty"`
	Type             *string     `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	IsTemplated      *bool       `protobuf:"varint,3,opt,name=is_templated,json=isTemplated" json:"is_templated,omitempty"`
	Description      *string     `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Kwargs           []*LinkArgs `protobuf:"bytes,5,rep,name=kwargs" json:"kwargs,omitempty"`
	RessourceName    *string     `protobuf:"bytes,6,opt,name=ressource_name,json=ressourceName" json:"ressource_name,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{38} }

func (m *Link) GetRel() string {
	if m != nil && m.Rel != nil {
		return *m.Rel
	}
	return ""
}

func (m *Link) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Link) GetIsTemplated() bool {
	if m != nil && m.IsTemplated != nil {
		return *m.IsTemplated
	}
	return false
}

func (m *Link) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Link) GetKwargs() []*LinkArgs {
	if m != nil {
		return m.Kwargs
	}
	return nil
}

func (m *Link) GetRessourceName() string {
	if m != nil && m.RessourceName != nil {
		return *m.RessourceName
	}
	return ""
}

type GraphicalIsochrone struct {
	Geojson           *string   `protobuf:"bytes,1,opt,name=geojson" json:"geojson,omitempty"`
	MaxDuration       *int32    `protobuf:"varint,2,opt,name=max_duration,json=maxDuration" json:"max_duration,omitempty"`
	MinDuration       *int32    `protobuf:"varint,3,opt,name=min_duration,json=minDuration" json:"min_duration,omitempty"`
	Origin            *PtObject `protobuf:"bytes,4,opt,name=origin" json:"origin,omitempty"`
	Destination       *PtObject `protobuf:"bytes,5,opt,name=destination" json:"destination,omitempty"`
	RequestedDateTime *uint64   `protobuf:"varint,6,opt,name=requested_date_time,json=requestedDateTime" json:"requested_date_time,omitempty"`
	MinDateTime       *uint64   `protobuf:"varint,7,opt,name=min_date_time,json=minDateTime" json:"min_date_time,omitempty"`
	MaxDateTime       *uint64   `protobuf:"varint,8,opt,name=max_date_time,json=maxDateTime" json:"max_date_time,omitempty"`
	XXX_unrecognized  []byte    `json:"-"`
}

func (m *GraphicalIsochrone) Reset()                    { *m = GraphicalIsochrone{} }
func (m *GraphicalIsochrone) String() string            { return proto.CompactTextString(m) }
func (*GraphicalIsochrone) ProtoMessage()               {}
func (*GraphicalIsochrone) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{39} }

func (m *GraphicalIsochrone) GetGeojson() string {
	if m != nil && m.Geojson != nil {
		return *m.Geojson
	}
	return ""
}

func (m *GraphicalIsochrone) GetMaxDuration() int32 {
	if m != nil && m.MaxDuration != nil {
		return *m.MaxDuration
	}
	return 0
}

func (m *GraphicalIsochrone) GetMinDuration() int32 {
	if m != nil && m.MinDuration != nil {
		return *m.MinDuration
	}
	return 0
}

func (m *GraphicalIsochrone) GetOrigin() *PtObject {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *GraphicalIsochrone) GetDestination() *PtObject {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *GraphicalIsochrone) GetRequestedDateTime() uint64 {
	if m != nil && m.RequestedDateTime != nil {
		return *m.RequestedDateTime
	}
	return 0
}

func (m *GraphicalIsochrone) GetMinDateTime() uint64 {
	if m != nil && m.MinDateTime != nil {
		return *m.MinDateTime
	}
	return 0
}

func (m *GraphicalIsochrone) GetMaxDateTime() uint64 {
	if m != nil && m.MaxDateTime != nil {
		return *m.MaxDateTime
	}
	return 0
}

type HeatMap struct {
	HeatMatrix        *string   `protobuf:"bytes,1,opt,name=heat_matrix,json=heatMatrix" json:"heat_matrix,omitempty"`
	Origin            *PtObject `protobuf:"bytes,2,opt,name=origin" json:"origin,omitempty"`
	Destination       *PtObject `protobuf:"bytes,3,opt,name=destination" json:"destination,omitempty"`
	RequestedDateTime *uint64   `protobuf:"varint,4,opt,name=requested_date_time,json=requestedDateTime" json:"requested_date_time,omitempty"`
	XXX_unrecognized  []byte    `json:"-"`
}

func (m *HeatMap) Reset()                    { *m = HeatMap{} }
func (m *HeatMap) String() string            { return proto.CompactTextString(m) }
func (*HeatMap) ProtoMessage()               {}
func (*HeatMap) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{40} }

func (m *HeatMap) GetHeatMatrix() string {
	if m != nil && m.HeatMatrix != nil {
		return *m.HeatMatrix
	}
	return ""
}

func (m *HeatMap) GetOrigin() *PtObject {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *HeatMap) GetDestination() *PtObject {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *HeatMap) GetRequestedDateTime() uint64 {
	if m != nil && m.RequestedDateTime != nil {
		return *m.RequestedDateTime
	}
	return 0
}

type RoutingElement struct {
	Duration         *int32         `protobuf:"varint,1,req,name=duration" json:"duration,omitempty"`
	RoutingStatus    *RoutingStatus `protobuf:"varint,2,req,name=routing_status,json=routingStatus,enum=pbnavitia.RoutingStatus" json:"routing_status,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *RoutingElement) Reset()                    { *m = RoutingElement{} }
func (m *RoutingElement) String() string            { return proto.CompactTextString(m) }
func (*RoutingElement) ProtoMessage()               {}
func (*RoutingElement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{41} }

func (m *RoutingElement) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *RoutingElement) GetRoutingStatus() RoutingStatus {
	if m != nil && m.RoutingStatus != nil {
		return *m.RoutingStatus
	}
	return RoutingStatus_reached
}

type StreetNetworkRoutingRow struct {
	RoutingResponse  []*RoutingElement `protobuf:"bytes,2,rep,name=routing_response,json=routingResponse" json:"routing_response,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *StreetNetworkRoutingRow) Reset()                    { *m = StreetNetworkRoutingRow{} }
func (m *StreetNetworkRoutingRow) String() string            { return proto.CompactTextString(m) }
func (*StreetNetworkRoutingRow) ProtoMessage()               {}
func (*StreetNetworkRoutingRow) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{42} }

func (m *StreetNetworkRoutingRow) GetRoutingResponse() []*RoutingElement {
	if m != nil {
		return m.RoutingResponse
	}
	return nil
}

type StreetNetworkRoutingMatrix struct {
	Rows             []*StreetNetworkRoutingRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *StreetNetworkRoutingMatrix) Reset()                    { *m = StreetNetworkRoutingMatrix{} }
func (m *StreetNetworkRoutingMatrix) String() string            { return proto.CompactTextString(m) }
func (*StreetNetworkRoutingMatrix) ProtoMessage()               {}
func (*StreetNetworkRoutingMatrix) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{43} }

func (m *StreetNetworkRoutingMatrix) GetRows() []*StreetNetworkRoutingRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Response struct {
	StatusCode      *int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Error           *Error  `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Info            *string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	Status          *Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	PublicationDate *int32  `protobuf:"varint,5,opt,name=publication_date,json=publicationDate" json:"publication_date,omitempty"`
	// PtObjects
	IgnoredWords []string    `protobuf:"bytes,11,rep,name=ignored_words,json=ignoredWords" json:"ignored_words,omitempty"`
	BadWords     []string    `protobuf:"bytes,12,rep,name=bad_words,json=badWords" json:"bad_words,omitempty"`
	Places       []*PtObject `protobuf:"bytes,13,rep,name=places" json:"places,omitempty"`
	PlacesNearby []*PtObject `protobuf:"bytes,14,rep,name=places_nearby,json=placesNearby" json:"places_nearby,omitempty"`
	// Ptref
	ValidityPatterns     []*ValidityPattern     `protobuf:"bytes,15,rep,name=validity_patterns,json=validityPatterns" json:"validity_patterns,omitempty"`
	Lines                []*Line                `protobuf:"bytes,16,rep,name=lines" json:"lines,omitempty"`
	JourneyPatterns      []*JourneyPattern      `protobuf:"bytes,17,rep,name=journey_patterns,json=journeyPatterns" json:"journey_patterns,omitempty"`
	VehicleJourneys      []*VehicleJourney      `protobuf:"bytes,18,rep,name=vehicle_journeys,json=vehicleJourneys" json:"vehicle_journeys,omitempty"`
	StopPoints           []*StopPoint           `protobuf:"bytes,19,rep,name=stop_points,json=stopPoints" json:"stop_points,omitempty"`
	StopAreas            []*StopArea            `protobuf:"bytes,20,rep,name=stop_areas,json=stopAreas" json:"stop_areas,omitempty"`
	Networks             []*Network             `protobuf:"bytes,21,rep,name=networks" json:"networks,omitempty"`
	PhysicalModes        []*PhysicalMode        `protobuf:"bytes,22,rep,name=physical_modes,json=physicalModes" json:"physical_modes,omitempty"`
	CommercialModes      []*CommercialMode      `protobuf:"bytes,23,rep,name=commercial_modes,json=commercialModes" json:"commercial_modes,omitempty"`
	Connections          []*Connection          `protobuf:"bytes,24,rep,name=connections" json:"connections,omitempty"`
	JourneyPatternPoints []*JourneyPatternPoint `protobuf:"bytes,25,rep,name=journey_pattern_points,json=journeyPatternPoints" json:"journey_pattern_points,omitempty"`
	Companies            []*Company             `protobuf:"bytes,26,rep,name=companies" json:"companies,omitempty"`
	Routes               []*Route               `protobuf:"bytes,27,rep,name=routes" json:"routes,omitempty"`
	Pois                 []*Poi                 `protobuf:"bytes,28,rep,name=pois" json:"pois,omitempty"`
	PoiTypes             []*PoiType             `protobuf:"bytes,29,rep,name=poi_types,json=poiTypes" json:"poi_types,omitempty"`
	Calendars            []*Calendar            `protobuf:"bytes,55,rep,name=calendars" json:"calendars,omitempty"`
	LineGroups           []*LineGroup           `protobuf:"bytes,56,rep,name=line_groups,json=lineGroups" json:"line_groups,omitempty"`
	Trips                []*Trip                `protobuf:"bytes,62,rep,name=trips" json:"trips,omitempty"`
	Contributors         []*Contributor         `protobuf:"bytes,64,rep,name=contributors" json:"contributors,omitempty"`
	Datasets             []*Dataset             `protobuf:"bytes,65,rep,name=datasets" json:"datasets,omitempty"`
	RoutePoints          []*RoutePoint          `protobuf:"bytes,66,rep,name=route_points,json=routePoints" json:"route_points,omitempty"`
	// For api /disruptions
	Impacts []*Impact `protobuf:"bytes,57,rep,name=impacts" json:"impacts,omitempty"`
	// Journeys
	Journeys            []*Journey    `protobuf:"bytes,30,rep,name=journeys" json:"journeys,omitempty"`
	ResponseType        *ResponseType `protobuf:"varint,31,opt,name=response_type,json=responseType,enum=pbnavitia.ResponseType" json:"response_type,omitempty"`
	Prev                *string       `protobuf:"bytes,32,opt,name=prev" json:"prev,omitempty"`
	Next                *string       `protobuf:"bytes,33,opt,name=next" json:"next,omitempty"`
	NextRequestDateTime *uint32       `protobuf:"varint,34,opt,name=next_request_date_time,json=nextRequestDateTime" json:"next_request_date_time,omitempty"`
	// TimeTables
	RouteSchedules  []*RouteSchedule  `protobuf:"bytes,35,rep,name=route_schedules,json=routeSchedules" json:"route_schedules,omitempty"`
	DepartureBoards []*DepartureBoard `protobuf:"bytes,36,rep,name=departure_boards,json=departureBoards" json:"departure_boards,omitempty"`
	NextDepartures  []*Passage        `protobuf:"bytes,37,rep,name=next_departures,json=nextDepartures" json:"next_departures,omitempty"`
	NextArrivals    []*Passage        `protobuf:"bytes,38,rep,name=next_arrivals,json=nextArrivals" json:"next_arrivals,omitempty"`
	StopSchedules   []*StopSchedule   `protobuf:"bytes,39,rep,name=stop_schedules,json=stopSchedules" json:"stop_schedules,omitempty"`
	Load            *Load             `protobuf:"bytes,46,opt,name=load" json:"load,omitempty"`
	Metadatas       *Metadatas        `protobuf:"bytes,48,opt,name=metadatas" json:"metadatas,omitempty"`
	Pagination      *Pagination       `protobuf:"bytes,49,opt,name=pagination" json:"pagination,omitempty"`
	// TrafficReports
	TrafficReports []*TrafficReports `protobuf:"bytes,61,rep,name=traffic_reports,json=trafficReports" json:"traffic_reports,omitempty"`
	LineReports    []*LineReport     `protobuf:"bytes,73,rep,name=line_reports,json=lineReports" json:"line_reports,omitempty"`
	// Fare
	Tickets []*Ticket `protobuf:"bytes,51,rep,name=tickets" json:"tickets,omitempty"`
	// Ptobject
	PtObjects      []*PtObject      `protobuf:"bytes,52,rep,name=pt_objects,json=ptObjects" json:"pt_objects,omitempty"`
	FeedPublishers []*FeedPublisher `protobuf:"bytes,53,rep,name=feed_publishers,json=feedPublishers" json:"feed_publishers,omitempty"`
	// experimental
	NearestStopPoints []*NearestStopPoint `protobuf:"bytes,63,rep,name=nearest_stop_points,json=nearestStopPoints" json:"nearest_stop_points,omitempty"`
	// links
	// some links computation is done in jormungandr but before json creation, so it is in the protobuf
	// even if it is not used in kraken
	Links []*Link `protobuf:"bytes,67,rep,name=links" json:"links,omitempty"`
	// Isochrone
	GraphicalIsochrones []*GraphicalIsochrone `protobuf:"bytes,68,rep,name=graphical_isochrones,json=graphicalIsochrones" json:"graphical_isochrones,omitempty"`
	// Heat map
	HeatMaps  []*HeatMap `protobuf:"bytes,71,rep,name=heat_maps,json=heatMaps" json:"heat_maps,omitempty"`
	GeoStatus *GeoStatus `protobuf:"bytes,69,opt,name=geo_status,json=geoStatus" json:"geo_status,omitempty"`
	// Car CO2 emission
	CarCo2Emission   *Co2Emission                `protobuf:"bytes,70,opt,name=car_co2_emission,json=carCo2Emission" json:"car_co2_emission,omitempty"`
	SnRoutingMatrix  *StreetNetworkRoutingMatrix `protobuf:"bytes,72,opt,name=sn_routing_matrix,json=snRoutingMatrix" json:"sn_routing_matrix,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{44} }

func (m *Response) GetStatusCode() int32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

func (m *Response) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetInfo() string {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return ""
}

func (m *Response) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Response) GetPublicationDate() int32 {
	if m != nil && m.PublicationDate != nil {
		return *m.PublicationDate
	}
	return 0
}

func (m *Response) GetIgnoredWords() []string {
	if m != nil {
		return m.IgnoredWords
	}
	return nil
}

func (m *Response) GetBadWords() []string {
	if m != nil {
		return m.BadWords
	}
	return nil
}

func (m *Response) GetPlaces() []*PtObject {
	if m != nil {
		return m.Places
	}
	return nil
}

func (m *Response) GetPlacesNearby() []*PtObject {
	if m != nil {
		return m.PlacesNearby
	}
	return nil
}

func (m *Response) GetValidityPatterns() []*ValidityPattern {
	if m != nil {
		return m.ValidityPatterns
	}
	return nil
}

func (m *Response) GetLines() []*Line {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *Response) GetJourneyPatterns() []*JourneyPattern {
	if m != nil {
		return m.JourneyPatterns
	}
	return nil
}

func (m *Response) GetVehicleJourneys() []*VehicleJourney {
	if m != nil {
		return m.VehicleJourneys
	}
	return nil
}

func (m *Response) GetStopPoints() []*StopPoint {
	if m != nil {
		return m.StopPoints
	}
	return nil
}

func (m *Response) GetStopAreas() []*StopArea {
	if m != nil {
		return m.StopAreas
	}
	return nil
}

func (m *Response) GetNetworks() []*Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *Response) GetPhysicalModes() []*PhysicalMode {
	if m != nil {
		return m.PhysicalModes
	}
	return nil
}

func (m *Response) GetCommercialModes() []*CommercialMode {
	if m != nil {
		return m.CommercialModes
	}
	return nil
}

func (m *Response) GetConnections() []*Connection {
	if m != nil {
		return m.Connections
	}
	return nil
}

func (m *Response) GetJourneyPatternPoints() []*JourneyPatternPoint {
	if m != nil {
		return m.JourneyPatternPoints
	}
	return nil
}

func (m *Response) GetCompanies() []*Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *Response) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Response) GetPois() []*Poi {
	if m != nil {
		return m.Pois
	}
	return nil
}

func (m *Response) GetPoiTypes() []*PoiType {
	if m != nil {
		return m.PoiTypes
	}
	return nil
}

func (m *Response) GetCalendars() []*Calendar {
	if m != nil {
		return m.Calendars
	}
	return nil
}

func (m *Response) GetLineGroups() []*LineGroup {
	if m != nil {
		return m.LineGroups
	}
	return nil
}

func (m *Response) GetTrips() []*Trip {
	if m != nil {
		return m.Trips
	}
	return nil
}

func (m *Response) GetContributors() []*Contributor {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *Response) GetDatasets() []*Dataset {
	if m != nil {
		return m.Datasets
	}
	return nil
}

func (m *Response) GetRoutePoints() []*RoutePoint {
	if m != nil {
		return m.RoutePoints
	}
	return nil
}

func (m *Response) GetImpacts() []*Impact {
	if m != nil {
		return m.Impacts
	}
	return nil
}

func (m *Response) GetJourneys() []*Journey {
	if m != nil {
		return m.Journeys
	}
	return nil
}

func (m *Response) GetResponseType() ResponseType {
	if m != nil && m.ResponseType != nil {
		return *m.ResponseType
	}
	return ResponseType_ITINERARY_FOUND
}

func (m *Response) GetPrev() string {
	if m != nil && m.Prev != nil {
		return *m.Prev
	}
	return ""
}

func (m *Response) GetNext() string {
	if m != nil && m.Next != nil {
		return *m.Next
	}
	return ""
}

func (m *Response) GetNextRequestDateTime() uint32 {
	if m != nil && m.NextRequestDateTime != nil {
		return *m.NextRequestDateTime
	}
	return 0
}

func (m *Response) GetRouteSchedules() []*RouteSchedule {
	if m != nil {
		return m.RouteSchedules
	}
	return nil
}

func (m *Response) GetDepartureBoards() []*DepartureBoard {
	if m != nil {
		return m.DepartureBoards
	}
	return nil
}

func (m *Response) GetNextDepartures() []*Passage {
	if m != nil {
		return m.NextDepartures
	}
	return nil
}

func (m *Response) GetNextArrivals() []*Passage {
	if m != nil {
		return m.NextArrivals
	}
	return nil
}

func (m *Response) GetStopSchedules() []*StopSchedule {
	if m != nil {
		return m.StopSchedules
	}
	return nil
}

func (m *Response) GetLoad() *Load {
	if m != nil {
		return m.Load
	}
	return nil
}

func (m *Response) GetMetadatas() *Metadatas {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

func (m *Response) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *Response) GetTrafficReports() []*TrafficReports {
	if m != nil {
		return m.TrafficReports
	}
	return nil
}

func (m *Response) GetLineReports() []*LineReport {
	if m != nil {
		return m.LineReports
	}
	return nil
}

func (m *Response) GetTickets() []*Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *Response) GetPtObjects() []*PtObject {
	if m != nil {
		return m.PtObjects
	}
	return nil
}

func (m *Response) GetFeedPublishers() []*FeedPublisher {
	if m != nil {
		return m.FeedPublishers
	}
	return nil
}

func (m *Response) GetNearestStopPoints() []*NearestStopPoint {
	if m != nil {
		return m.NearestStopPoints
	}
	return nil
}

func (m *Response) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Response) GetGraphicalIsochrones() []*GraphicalIsochrone {
	if m != nil {
		return m.GraphicalIsochrones
	}
	return nil
}

func (m *Response) GetHeatMaps() []*HeatMap {
	if m != nil {
		return m.HeatMaps
	}
	return nil
}

func (m *Response) GetGeoStatus() *GeoStatus {
	if m != nil {
		return m.GeoStatus
	}
	return nil
}

func (m *Response) GetCarCo2Emission() *Co2Emission {
	if m != nil {
		return m.CarCo2Emission
	}
	return nil
}

func (m *Response) GetSnRoutingMatrix() *StreetNetworkRoutingMatrix {
	if m != nil {
		return m.SnRoutingMatrix
	}
	return nil
}

type NearestStopPoint struct {
	StopPoint        *StopPoint `protobuf:"bytes,1,opt,name=stop_point,json=stopPoint" json:"stop_point,omitempty"`
	AccessDuration   *int32     `protobuf:"varint,2,opt,name=access_duration,json=accessDuration" json:"access_duration,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *NearestStopPoint) Reset()                    { *m = NearestStopPoint{} }
func (m *NearestStopPoint) String() string            { return proto.CompactTextString(m) }
func (*NearestStopPoint) ProtoMessage()               {}
func (*NearestStopPoint) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{45} }

func (m *NearestStopPoint) GetStopPoint() *StopPoint {
	if m != nil {
		return m.StopPoint
	}
	return nil
}

func (m *NearestStopPoint) GetAccessDuration() int32 {
	if m != nil && m.AccessDuration != nil {
		return *m.AccessDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*PathItem)(nil), "pbnavitia.PathItem")
	proto.RegisterType((*StreetNetwork)(nil), "pbnavitia.StreetNetwork")
	proto.RegisterType((*PtDisplayInfo)(nil), "pbnavitia.PtDisplayInfo")
	proto.RegisterType((*Uris)(nil), "pbnavitia.Uris")
	proto.RegisterType((*Cost)(nil), "pbnavitia.Cost")
	proto.RegisterType((*Ticket)(nil), "pbnavitia.Ticket")
	proto.RegisterType((*Fare)(nil), "pbnavitia.Fare")
	proto.RegisterType((*Co2Emission)(nil), "pbnavitia.Co2Emission")
	proto.RegisterType((*Durations)(nil), "pbnavitia.Durations")
	proto.RegisterType((*Distances)(nil), "pbnavitia.Distances")
	proto.RegisterType((*IndividualRating)(nil), "pbnavitia.IndividualRating")
	proto.RegisterType((*IndividualInformation)(nil), "pbnavitia.IndividualInformation")
	proto.RegisterType((*SeatsDescription)(nil), "pbnavitia.SeatsDescription")
	proto.RegisterType((*ExternalLink)(nil), "pbnavitia.ExternalLink")
	proto.RegisterType((*RidesharingInformation)(nil), "pbnavitia.RidesharingInformation")
	proto.RegisterType((*FeedPublisher)(nil), "pbnavitia.FeedPublisher")
	proto.RegisterType((*Section)(nil), "pbnavitia.Section")
	proto.RegisterType((*Journey)(nil), "pbnavitia.Journey")
	proto.RegisterType((*Planner)(nil), "pbnavitia.Planner")
	proto.RegisterType((*GeoStatus)(nil), "pbnavitia.GeoStatus")
	proto.RegisterType((*Status)(nil), "pbnavitia.Status")
	proto.RegisterType((*ScheduleStopTime)(nil), "pbnavitia.ScheduleStopTime")
	proto.RegisterType((*RouteScheduleRow)(nil), "pbnavitia.RouteScheduleRow")
	proto.RegisterType((*Header)(nil), "pbnavitia.Header")
	proto.RegisterType((*Table)(nil), "pbnavitia.Table")
	proto.RegisterType((*RouteSchedule)(nil), "pbnavitia.RouteSchedule")
	proto.RegisterType((*Passage)(nil), "pbnavitia.Passage")
	proto.RegisterType((*RoutePoint)(nil), "pbnavitia.RoutePoint")
	proto.RegisterType((*BoardItem)(nil), "pbnavitia.BoardItem")
	proto.RegisterType((*DepartureBoard)(nil), "pbnavitia.DepartureBoard")
	proto.RegisterType((*Load)(nil), "pbnavitia.Load")
	proto.RegisterType((*Metadatas)(nil), "pbnavitia.Metadatas")
	proto.RegisterType((*Pagination)(nil), "pbnavitia.Pagination")
	proto.RegisterType((*StopSchedule)(nil), "pbnavitia.StopSchedule")
	proto.RegisterType((*Error)(nil), "pbnavitia.Error")
	proto.RegisterType((*TrafficReports)(nil), "pbnavitia.TrafficReports")
	proto.RegisterType((*LineReport)(nil), "pbnavitia.LineReport")
	proto.RegisterType((*LinkArgs)(nil), "pbnavitia.LinkArgs")
	proto.RegisterType((*Link)(nil), "pbnavitia.Link")
	proto.RegisterType((*GraphicalIsochrone)(nil), "pbnavitia.GraphicalIsochrone")
	proto.RegisterType((*HeatMap)(nil), "pbnavitia.HeatMap")
	proto.RegisterType((*RoutingElement)(nil), "pbnavitia.RoutingElement")
	proto.RegisterType((*StreetNetworkRoutingRow)(nil), "pbnavitia.StreetNetworkRoutingRow")
	proto.RegisterType((*StreetNetworkRoutingMatrix)(nil), "pbnavitia.StreetNetworkRoutingMatrix")
	proto.RegisterType((*Response)(nil), "pbnavitia.Response")
	proto.RegisterType((*NearestStopPoint)(nil), "pbnavitia.NearestStopPoint")
	proto.RegisterEnum("pbnavitia.StreetNetworkMode", StreetNetworkMode_name, StreetNetworkMode_value)
	proto.RegisterEnum("pbnavitia.SectionType", SectionType_name, SectionType_value)
	proto.RegisterEnum("pbnavitia.TransferType", TransferType_name, TransferType_value)
	proto.RegisterEnum("pbnavitia.SectionAdditionalInformationType", SectionAdditionalInformationType_name, SectionAdditionalInformationType_value)
	proto.RegisterEnum("pbnavitia.GenderType", GenderType_name, GenderType_value)
	proto.RegisterEnum("pbnavitia.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterEnum("pbnavitia.RoutingStatus", RoutingStatus_name, RoutingStatus_value)
	proto.RegisterEnum("pbnavitia.ErrorErrorId", ErrorErrorId_name, ErrorErrorId_value)
}

func init() { proto.RegisterFile("response.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 5108 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7b, 0xcd, 0x6f, 0x1c, 0xc9,
	0x75, 0xb8, 0xe7, 0x93, 0x33, 0x6f, 0xbe, 0x5a, 0x45, 0x8a, 0x6a, 0x69, 0x77, 0x6d, 0x6e, 0xcb,
	0xbb, 0x2b, 0x4b, 0xb6, 0xec, 0xe5, 0xee, 0x7a, 0xb5, 0xfe, 0xfd, 0xec, 0xf5, 0x88, 0x1c, 0x49,
	0xf4, 0x52, 0x43, 0xa6, 0x38, 0x5a, 0xc1, 0x46, 0x80, 0x4e, 0xcd, 0x74, 0x91, 0xec, 0xe5, 0x4c,
	0xf7, 0xb8, 0xaa, 0x87, 0xa2, 0x72, 0x0b, 0xfc, 0x4f, 0x04, 0x41, 0x10, 0x04, 0x81, 0x83, 0x1c,
	0x92, 0x6b, 0x0e, 0x41, 0x90, 0x20, 0x39, 0xe4, 0x1e, 0xe4, 0x1f, 0xc8, 0x2d, 0x80, 0x73, 0xcb,
	0x29, 0xd7, 0xa0, 0x5e, 0x55, 0xf5, 0x74, 0x4f, 0x93, 0xb2, 0xb4, 0x30, 0x92, 0xd3, 0x74, 0xbd,
	0xf7, 0xea, 0xeb, 0xbd, 0x57, 0xef, 0xab, 0x6a, 0xa0, 0x2b, 0xb8, 0x9c, 0xc7, 0x91, 0xe4, 0xf7,
	0xe7, 0x22, 0x4e, 0x62, 0xd2, 0x9c, 0x8f, 0x23, 0x76, 0x1e, 0x26, 0x21, 0xbb, 0x05, 0xc9, 0xcb,
	0xb9, 0x01, 0x7b, 0x73, 0x68, 0x1c, 0xb2, 0xe4, 0x74, 0x2f, 0xe1, 0x33, 0x42, 0xa0, 0x1a, 0xb1,
	0x19, 0x77, 0x4b, 0x5b, 0xa5, 0x3b, 0x4d, 0x8a, 0xdf, 0x64, 0x13, 0xea, 0x53, 0x1e, 0x9d, 0x24,
	0xa7, 0x6e, 0x79, 0xab, 0x74, 0xa7, 0x44, 0x4d, 0x8b, 0xbc, 0x0d, 0xcd, 0x20, 0x14, 0x7c, 0x92,
	0x84, 0x71, 0xe4, 0x56, 0xb6, 0x4a, 0x77, 0x6a, 0x74, 0x09, 0x20, 0xb7, 0xa0, 0x11, 0x2c, 0x04,
	0x43, 0x64, 0x15, 0xfb, 0xa5, 0x6d, 0xef, 0x37, 0x25, 0xe8, 0x1c, 0x25, 0x82, 0xf3, 0x64, 0xc8,
	0x93, 0x17, 0xb1, 0x38, 0xcb, 0xcc, 0x51, 0xca, 0xcd, 0x91, 0x1d, 0xa5, 0x9c, 0x1f, 0x85, 0xfc,
	0x00, 0xaa, 0xb3, 0x38, 0xe0, 0x38, 0x75, 0x77, 0xfb, 0xed, 0xfb, 0xe9, 0xee, 0xee, 0xe7, 0xc6,
	0x7e, 0x1a, 0x07, 0x9c, 0x22, 0x25, 0xd9, 0x06, 0x98, 0xb3, 0xe4, 0xd4, 0x0f, 0x13, 0x3e, 0x93,
	0x6e, 0x75, 0xab, 0x72, 0xa7, 0xb5, 0xbd, 0x9e, 0xe9, 0x67, 0xd9, 0x40, 0x9b, 0x73, 0xf3, 0x25,
	0xc9, 0x4f, 0xa0, 0x35, 0x89, 0x63, 0x11, 0x84, 0x11, 0x4b, 0xb8, 0x74, 0x6b, 0xd8, 0x29, 0x3b,
	0xd9, 0x63, 0x1e, 0x9f, 0x08, 0x36, 0x3f, 0x0d, 0x27, 0x6c, 0xba, 0xa3, 0x28, 0x69, 0xb6, 0x83,
	0xf7, 0x37, 0x55, 0xe8, 0x1c, 0x26, 0xbb, 0xa1, 0x9c, 0x4f, 0xd9, 0xcb, 0xbd, 0xe8, 0x38, 0x26,
	0x2e, 0xac, 0x45, 0x7a, 0x69, 0x86, 0xcd, 0xb6, 0xa9, 0xb8, 0x3f, 0x51, 0x3b, 0x2a, 0x6b, 0xee,
	0xab, 0x6f, 0xc5, 0x81, 0x53, 0xce, 0x02, 0x19, 0x9e, 0x68, 0x26, 0x37, 0x69, 0xda, 0xce, 0x4b,
	0xa0, 0x8a, 0xc8, 0x8c, 0x04, 0x36, 0xa0, 0x36, 0x89, 0xa7, 0xb1, 0x70, 0x6b, 0x88, 0xd1, 0x0d,
	0xf2, 0x01, 0xf4, 0x26, 0xf1, 0x6c, 0xc6, 0xc5, 0x24, 0x64, 0x53, 0x1f, 0x19, 0x58, 0x47, 0x7c,
	0x77, 0x09, 0x56, 0x2c, 0x23, 0xb7, 0xa1, 0x33, 0x3f, 0x7d, 0x29, 0xd5, 0xb6, 0x34, 0xd9, 0x1a,
	0x92, 0xb5, 0x2d, 0x10, 0x89, 0xb6, 0xa0, 0x15, 0x70, 0x39, 0x11, 0xe1, 0x1c, 0xd7, 0xd0, 0x40,
	0x92, 0x2c, 0x88, 0xdc, 0x86, 0xea, 0x42, 0x84, 0xd2, 0x6d, 0x6e, 0x95, 0xee, 0xb4, 0xb6, 0x7b,
	0x19, 0xc6, 0x3d, 0x13, 0xa1, 0xa4, 0x88, 0x24, 0x9f, 0x43, 0xf7, 0x94, 0x49, 0x9f, 0xff, 0x72,
	0x11, 0xce, 0x67, 0x3c, 0x4a, 0xa4, 0xdb, 0x42, 0x72, 0x37, 0x43, 0x7e, 0xca, 0xe4, 0x20, 0xc5,
	0xd3, 0x4e, 0xae, 0x99, 0xea, 0x6d, 0x3b, 0xa3, 0xb7, 0xf7, 0xa1, 0x31, 0xe3, 0x52, 0xb2, 0x13,
	0x2e, 0xdd, 0x0e, 0x8a, 0x8d, 0x64, 0x86, 0x7b, 0xaa, 0x51, 0x34, 0xa5, 0x21, 0xdf, 0x82, 0x56,
	0x38, 0x9b, 0xb3, 0x49, 0xe2, 0xe3, 0x82, 0xc9, 0x56, 0xe5, 0x4e, 0x93, 0x82, 0x06, 0xa9, 0xb5,
	0x92, 0xf7, 0xa0, 0x16, 0xc5, 0x4a, 0x09, 0x7a, 0x38, 0x5a, 0x76, 0x2f, 0xc3, 0x38, 0xe1, 0x54,
	0x63, 0x95, 0x54, 0xac, 0x84, 0xa4, 0xeb, 0xe0, 0x28, 0x4b, 0x00, 0x79, 0x07, 0x20, 0xe1, 0x17,
	0x89, 0xaf, 0x45, 0x73, 0x4d, 0x0b, 0x4d, 0x41, 0x76, 0x14, 0xc0, 0xfb, 0xe3, 0x32, 0x54, 0x71,
	0x32, 0x17, 0xd6, 0x26, 0xf1, 0x6c, 0xce, 0xa2, 0x97, 0x56, 0x4b, 0x4c, 0x53, 0x49, 0xf0, 0x9c,
	0x9f, 0x86, 0x93, 0x29, 0xf7, 0xbf, 0x8a, 0x17, 0x22, 0xe2, 0x2f, 0x8d, 0xc2, 0x74, 0x0d, 0xf8,
	0x67, 0x1a, 0xaa, 0x98, 0x32, 0x0d, 0x23, 0x6e, 0xd4, 0x06, 0xbf, 0x95, 0x52, 0x88, 0x78, 0x91,
	0x70, 0xa3, 0x2e, 0xba, 0x71, 0x99, 0x52, 0xd4, 0x5e, 0x4f, 0x29, 0xea, 0x97, 0x28, 0x45, 0x46,
	0xc1, 0xd7, 0x0a, 0x0a, 0xae, 0x78, 0x64, 0xf4, 0x04, 0xbf, 0xd5, 0xdc, 0x66, 0x1b, 0xfe, 0x9c,
	0x25, 0x09, 0x17, 0x11, 0xea, 0x4a, 0x93, 0x76, 0x0d, 0xf8, 0x50, 0x43, 0xbd, 0x07, 0x50, 0xdd,
	0x89, 0x65, 0xa2, 0xb6, 0x70, 0xce, 0xa6, 0x0b, 0x6e, 0x4c, 0x85, 0x6e, 0xa8, 0x73, 0x32, 0x59,
	0x08, 0xc1, 0xa3, 0x89, 0x65, 0x47, 0xda, 0xf6, 0xfe, 0xbc, 0x04, 0xf5, 0x51, 0x38, 0x39, 0xe3,
	0x09, 0xe9, 0x42, 0x39, 0x0c, 0x0c, 0x47, 0xcb, 0x61, 0x90, 0x2a, 0x4e, 0x39, 0xa3, 0x38, 0xb7,
	0xd5, 0x31, 0x94, 0x09, 0xf2, 0x2d, 0x2f, 0x66, 0x35, 0x3f, 0x45, 0xa4, 0x92, 0xa3, 0xd4, 0x07,
	0xcd, 0x0f, 0x03, 0xb4, 0x25, 0x4d, 0xda, 0x34, 0x90, 0xbd, 0x40, 0x2d, 0xf2, 0x38, 0x5e, 0x44,
	0x01, 0xf2, 0xb1, 0x41, 0x75, 0xc3, 0x08, 0x55, 0xa9, 0xac, 0x61, 0x9c, 0x6d, 0x7a, 0x7f, 0x00,
	0xd5, 0x47, 0x4c, 0x70, 0xa5, 0x63, 0x49, 0x9c, 0xb0, 0x29, 0x2e, 0xf1, 0x92, 0xc9, 0x35, 0x96,
	0xbc, 0x05, 0xcd, 0x04, 0x37, 0xa4, 0x26, 0x2f, 0xe3, 0xe4, 0x0d, 0x0d, 0xc8, 0xce, 0x5d, 0xc9,
	0xcc, 0xed, 0x7d, 0x0a, 0xad, 0x9d, 0x78, 0x7b, 0x30, 0x0b, 0xa5, 0x34, 0xd6, 0xe1, 0x12, 0x2e,
	0x12, 0xa8, 0x2e, 0xa2, 0x30, 0xb1, 0xec, 0x50, 0xdf, 0xde, 0xaf, 0x4a, 0xd0, 0xdc, 0x35, 0x46,
	0x57, 0xaa, 0x7e, 0xcb, 0x05, 0xd6, 0xec, 0x7a, 0x5c, 0x58, 0x7b, 0xc1, 0xa6, 0x67, 0x61, 0x74,
	0x82, 0x5d, 0x6b, 0xd4, 0x36, 0xd5, 0x88, 0xe3, 0xf0, 0x8c, 0x1b, 0x07, 0x81, 0xdf, 0xc4, 0x81,
	0xca, 0x84, 0x09, 0x54, 0xc1, 0x1a, 0x55, 0x9f, 0xca, 0x8e, 0x88, 0x30, 0xe0, 0xf2, 0x94, 0x09,
	0x35, 0x46, 0x0d, 0x31, 0x59, 0x90, 0x37, 0x83, 0xe6, 0x6e, 0x28, 0x13, 0x16, 0x4d, 0xb8, 0xcc,
	0x4e, 0x57, 0xba, 0x7c, 0xba, 0x72, 0x71, 0xba, 0xca, 0x95, 0xd3, 0x55, 0x8b, 0xd3, 0x5d, 0x80,
	0xb3, 0x17, 0x05, 0xe1, 0x79, 0x18, 0x2c, 0xd8, 0x94, 0xb2, 0x44, 0x8d, 0x7d, 0x39, 0xcb, 0xd0,
	0xcc, 0x2e, 0x22, 0xcd, 0xb3, 0x0e, 0xd5, 0x0d, 0x25, 0x20, 0x39, 0x61, 0x53, 0xee, 0xcf, 0x42,
	0x6d, 0xb7, 0x4b, 0xb4, 0x81, 0x80, 0xa7, 0x61, 0x94, 0x41, 0xb2, 0x0b, 0xeb, 0x1c, 0x35, 0x92,
	0x5d, 0x78, 0x7f, 0x55, 0x82, 0xeb, 0xcb, 0xa9, 0x95, 0xc7, 0x10, 0x33, 0x66, 0x0d, 0x3a, 0x9b,
	0x86, 0x4c, 0x1a, 0xf5, 0xd5, 0x0d, 0x05, 0x0d, 0x67, 0xec, 0xc4, 0xaa, 0xb0, 0x6e, 0x90, 0xef,
	0x41, 0xfd, 0x84, 0x47, 0x01, 0x17, 0xc6, 0x3d, 0x5e, 0xcf, 0x79, 0x2c, 0x85, 0x18, 0xbd, 0x9c,
	0x73, 0x6a, 0x88, 0xc8, 0x47, 0x50, 0x17, 0xb8, 0x49, 0x5c, 0x4e, 0x6b, 0xfb, 0xad, 0x0c, 0xf9,
	0x2a, 0x1f, 0xa8, 0x21, 0xf5, 0x1e, 0x81, 0x73, 0xc4, 0x59, 0x22, 0x77, 0x33, 0xe6, 0x3e, 0xa7,
	0x1e, 0x1d, 0xab, 0x1e, 0x6f, 0x43, 0x93, 0x9d, 0xb3, 0x70, 0xca, 0xc6, 0x53, 0x6e, 0xf8, 0xb4,
	0x04, 0x78, 0x1f, 0x43, 0x7b, 0x70, 0xa1, 0x8e, 0x38, 0x9b, 0xee, 0x87, 0xd1, 0x99, 0x92, 0xd7,
	0x19, 0xb7, 0x66, 0x4f, 0x7d, 0x2a, 0xa9, 0x9e, 0x0a, 0x7e, 0x6c, 0xd5, 0x52, 0x7d, 0x7b, 0xff,
	0x59, 0x82, 0x4d, 0xba, 0x94, 0x58, 0x96, 0x51, 0xb7, 0xa0, 0x11, 0xcf, 0xb9, 0x60, 0x49, 0x2c,
	0xcc, 0x28, 0x69, 0x3b, 0x6b, 0x9c, 0xca, 0x79, 0xe3, 0xf4, 0x00, 0xea, 0x81, 0x08, 0xcf, 0x0d,
	0xcb, 0x5a, 0xdb, 0x5b, 0x97, 0xf2, 0x20, 0x33, 0x0f, 0x35, 0xf4, 0xe4, 0x43, 0xa8, 0x49, 0xc5,
	0x88, 0x4b, 0x98, 0xb7, 0xca, 0x20, 0xaa, 0x29, 0xc9, 0xf7, 0xa0, 0x36, 0x0d, 0xa3, 0x33, 0x1b,
	0x50, 0xdc, 0xc8, 0x74, 0xc9, 0xf2, 0x82, 0x6a, 0x2a, 0xcf, 0x87, 0xce, 0x23, 0xce, 0x83, 0xc3,
	0xc5, 0x78, 0x1a, 0xca, 0x53, 0x2e, 0x52, 0x3b, 0x56, 0x7e, 0x85, 0x1d, 0x73, 0xa0, 0xb2, 0x10,
	0x53, 0x63, 0xfe, 0xd5, 0xa7, 0xda, 0xfc, 0x34, 0x9c, 0xf0, 0x48, 0x5a, 0xfb, 0x6f, 0x9b, 0xde,
	0xdf, 0x36, 0x61, 0xed, 0xc8, 0x04, 0x0e, 0x77, 0xa1, 0xaa, 0xc2, 0x43, 0x64, 0x5d, 0x77, 0x7b,
	0x33, 0xb7, 0x1b, 0xa4, 0x40, 0xd5, 0x41, 0x1a, 0x72, 0x0f, 0xea, 0xb1, 0x08, 0x4f, 0x42, 0x1d,
	0x9e, 0xad, 0x84, 0x53, 0xc9, 0xc1, 0xf8, 0x2b, 0x3e, 0x49, 0xa8, 0x21, 0x21, 0x9f, 0x60, 0xb4,
	0x90, 0xa8, 0xc8, 0xc8, 0xc6, 0x8c, 0x57, 0xf4, 0xc8, 0xd2, 0x91, 0x43, 0xb8, 0x31, 0x4f, 0xfc,
	0x40, 0x87, 0x50, 0x7e, 0xb8, 0x14, 0x80, 0x65, 0xb8, 0x9b, 0x1b, 0x22, 0x13, 0x6b, 0xd1, 0xeb,
	0xf3, 0x6c, 0xd3, 0x76, 0x4b, 0x83, 0x92, 0xda, 0xab, 0x82, 0x92, 0x87, 0x45, 0x3f, 0xab, 0x83,
	0x98, 0x9b, 0x19, 0xfa, 0x2f, 0x73, 0x2e, 0xb7, 0xe0, 0x82, 0x3f, 0x87, 0x9e, 0x4c, 0xe2, 0xb9,
	0x1f, 0xb0, 0x84, 0xfb, 0x49, 0x38, 0xe3, 0xd2, 0x85, 0x82, 0xc0, 0x8f, 0x92, 0x78, 0xbe, 0xcb,
	0x12, 0x3e, 0x0a, 0x67, 0x9c, 0x76, 0x64, 0xa6, 0x85, 0x91, 0x91, 0xc4, 0x68, 0xd6, 0xb7, 0x5a,
	0xdb, 0x2e, 0x6c, 0x39, 0x17, 0xee, 0xaa, 0x01, 0xb2, 0x91, 0xf5, 0xff, 0x87, 0x4e, 0x22, 0x58,
	0x24, 0x8f, 0xb9, 0xf0, 0x51, 0xaa, 0x1d, 0x94, 0x6a, 0x76, 0xfe, 0x91, 0xc1, 0xa3, 0x58, 0xdb,
	0x49, 0xa6, 0x45, 0x06, 0xb0, 0x91, 0xb1, 0x8a, 0x96, 0x0f, 0xd2, 0x7d, 0xbb, 0x10, 0x4f, 0x59,
	0x0e, 0xac, 0x67, 0xe8, 0x0d, 0x4c, 0x92, 0x5f, 0xc0, 0x8d, 0xec, 0x30, 0x19, 0x11, 0xba, 0xef,
	0xe0, 0x76, 0xde, 0xcd, 0x8c, 0x74, 0xf9, 0xa1, 0xa6, 0x9b, 0xe2, 0xf2, 0xc3, 0xbe, 0x0d, 0x35,
	0x79, 0xca, 0xe6, 0xdc, 0x75, 0x5f, 0x23, 0x34, 0xd7, 0xa4, 0xb9, 0xb4, 0xa2, 0x87, 0xc6, 0x7f,
	0x99, 0x56, 0xbc, 0x0f, 0xbd, 0x31, 0x3f, 0x09, 0xa3, 0xa5, 0xcc, 0x5c, 0x67, 0xab, 0x74, 0xa7,
	0x4a, 0x3b, 0x08, 0xb6, 0xa2, 0x21, 0x1e, 0x74, 0x78, 0x14, 0x64, 0xa8, 0xae, 0x21, 0x55, 0x8b,
	0x47, 0x41, 0x4a, 0xf3, 0x7d, 0xd8, 0x18, 0x33, 0xc9, 0xfd, 0xd5, 0x01, 0x6f, 0x22, 0xe9, 0x35,
	0x85, 0x7b, 0x98, 0x1b, 0xf4, 0x1e, 0x10, 0xec, 0x90, 0x1f, 0xf9, 0x16, 0x92, 0xf7, 0x14, 0x66,
	0x90, 0x19, 0xfd, 0x33, 0x95, 0xe1, 0xb1, 0xa9, 0x22, 0xf1, 0xa7, 0xfc, 0x9c, 0x4f, 0xdd, 0xb7,
	0x50, 0xb6, 0x59, 0xb1, 0xd0, 0xd1, 0xbe, 0xc2, 0xd0, 0x8e, 0xa5, 0xc4, 0x66, 0x26, 0xdf, 0x5a,
	0xc7, 0xed, 0xdb, 0x7c, 0x4b, 0x9b, 0x95, 0x8d, 0x34, 0x3c, 0xfa, 0x0c, 0xda, 0x93, 0x78, 0xdb,
	0xe7, 0x26, 0x6a, 0x70, 0xaf, 0xa3, 0xb4, 0x36, 0x73, 0x51, 0x49, 0x1a, 0x53, 0xa8, 0xc4, 0x67,
	0x19, 0x60, 0x04, 0x70, 0x83, 0x05, 0x41, 0xa8, 0x78, 0xca, 0xa6, 0xf9, 0x53, 0xbb, 0xb9, 0x55,
	0xb9, 0xd3, 0xdd, 0xbe, 0x57, 0x34, 0x2c, 0xfd, 0xb4, 0x43, 0x46, 0xc2, 0xa8, 0x96, 0x9b, 0xec,
	0x32, 0x94, 0xf4, 0xfe, 0x6c, 0x0d, 0xd6, 0xec, 0x61, 0xcb, 0x4a, 0xb5, 0xb4, 0x22, 0xd5, 0x77,
	0xa1, 0x1d, 0x8d, 0x7d, 0xab, 0xdb, 0xd2, 0xc4, 0x07, 0xad, 0x68, 0x6c, 0x95, 0x5f, 0x92, 0xfb,
	0xb0, 0x1e, 0xf0, 0x39, 0x13, 0xc9, 0x42, 0xf0, 0x0c, 0xf3, 0x2b, 0x5a, 0x56, 0x29, 0x2a, 0x65,
	0xff, 0x5d, 0xb8, 0xc6, 0x84, 0x08, 0xcf, 0xd9, 0x34, 0x43, 0x5d, 0xd5, 0xa2, 0x32, 0x88, 0x94,
	0xf6, 0x3e, 0xac, 0x0b, 0xfe, 0xcb, 0x05, 0x97, 0x09, 0xcf, 0x0a, 0xb6, 0xa6, 0xc7, 0x4e, 0x51,
	0x19, 0xfa, 0x86, 0x89, 0x25, 0xa5, 0x5b, 0x2f, 0x9c, 0x35, 0xc3, 0x2d, 0x9a, 0xd2, 0x64, 0xcc,
	0xf0, 0xda, 0x1b, 0x9b, 0xe1, 0xc6, 0x6b, 0x9a, 0x61, 0x62, 0xdc, 0x82, 0x8e, 0xce, 0xb5, 0xf9,
	0xbf, 0x0d, 0xd5, 0x63, 0x26, 0xb8, 0x0b, 0x05, 0x43, 0xaa, 0xa2, 0x59, 0x8a, 0x48, 0xec, 0xc8,
	0x4e, 0x54, 0x4e, 0x57, 0xc1, 0x8e, 0xec, 0x44, 0x92, 0x0f, 0xa1, 0xa9, 0x02, 0x9e, 0x28, 0x60,
	0x42, 0xba, 0xed, 0x42, 0x26, 0xbe, 0x63, 0x70, 0x74, 0x49, 0x55, 0xd0, 0xc5, 0xce, 0xeb, 0xeb,
	0xe2, 0x0e, 0x7c, 0x73, 0x16, 0xcb, 0xc4, 0x97, 0x5c, 0x84, 0xf1, 0x42, 0x2a, 0x5f, 0x22, 0x16,
	0xe8, 0x8f, 0x7d, 0x7e, 0x7c, 0xcc, 0x27, 0x89, 0xdb, 0xc5, 0x4d, 0xbd, 0xa5, 0xa8, 0x8e, 0x34,
	0xd1, 0x6e, 0x4a, 0x33, 0x40, 0x12, 0xcc, 0x0f, 0x23, 0xed, 0x9a, 0x55, 0xd4, 0xdd, 0xc3, 0x1e,
	0x60, 0x41, 0x7b, 0x01, 0xb9, 0x0e, 0x75, 0x19, 0xf9, 0xc1, 0x42, 0x18, 0x83, 0x51, 0x93, 0xd1,
	0xee, 0x42, 0x28, 0xd5, 0x4b, 0x2d, 0xb0, 0x42, 0x1a, 0x3b, 0x61, 0x61, 0x8a, 0xe4, 0x7d, 0xe8,
	0xcd, 0xc2, 0xc8, 0x7f, 0xc1, 0x42, 0x15, 0x58, 0x21, 0x15, 0xd1, 0x36, 0x67, 0x16, 0x46, 0xcf,
	0x35, 0x54, 0xd1, 0xdd, 0x01, 0x27, 0x1a, 0xfb, 0xe7, 0x5f, 0xf9, 0xfc, 0x22, 0xe1, 0x91, 0x56,
	0x8f, 0x75, 0x0c, 0xa7, 0xba, 0xd1, 0xf8, 0xcb, 0xaf, 0x06, 0x29, 0x54, 0x2d, 0x36, 0x1a, 0xfb,
	0xa9, 0x0e, 0x6d, 0x20, 0x11, 0x44, 0xe3, 0x23, 0xab, 0x31, 0xdb, 0xd0, 0xb4, 0x87, 0x43, 0x9a,
	0x63, 0xbd, 0x91, 0x61, 0x65, 0x1a, 0xf0, 0xd3, 0x25, 0x19, 0xf6, 0xb1, 0x31, 0xb8, 0xbb, 0x59,
	0xec, 0x63, 0x71, 0x74, 0x49, 0xe6, 0xfd, 0x65, 0x09, 0xd6, 0x0e, 0xa7, 0x2c, 0x8a, 0xb8, 0x50,
	0x5a, 0x9d, 0x7a, 0x90, 0xd2, 0x95, 0x1e, 0x24, 0xa5, 0x51, 0xbe, 0xcb, 0x96, 0xb0, 0xb4, 0xef,
	0x2a, 0x17, 0x7c, 0x17, 0x35, 0x78, 0xed, 0xbb, 0x44, 0xa6, 0xa5, 0x6c, 0xdc, 0x98, 0x1f, 0xc7,
	0xc2, 0x26, 0xc0, 0xa6, 0x85, 0x61, 0xf4, 0x71, 0xc2, 0x85, 0x4d, 0x81, 0xb1, 0xe1, 0xfd, 0x51,
	0x19, 0x9a, 0x8f, 0x79, 0x7c, 0x94, 0xb0, 0x64, 0xa1, 0x76, 0x7a, 0x3d, 0xef, 0x76, 0x7d, 0x19,
	0x2f, 0xc4, 0xc4, 0x16, 0xc6, 0xd6, 0x73, 0x3e, 0xf6, 0x08, 0x51, 0x2a, 0xaa, 0x8f, 0xc6, 0x3e,
	0x0b, 0x66, 0x61, 0x64, 0xed, 0x4b, 0x23, 0x1a, 0xf7, 0xb1, 0x4d, 0x3e, 0x84, 0xeb, 0x29, 0xd2,
	0x3f, 0x16, 0xf1, 0xcc, 0x9f, 0x84, 0x49, 0xc8, 0xa5, 0xc9, 0x4a, 0x88, 0x25, 0x7c, 0x24, 0xe2,
	0xd9, 0x0e, 0x62, 0xc8, 0x0d, 0x58, 0x8b, 0xc6, 0xfe, 0x0b, 0xf6, 0x52, 0x9a, 0x04, 0xa5, 0x1e,
	0x8d, 0x9f, 0xb3, 0x97, 0xd2, 0xd8, 0x32, 0x16, 0x04, 0x82, 0x4b, 0xc9, 0xa5, 0xcd, 0x96, 0xd4,
	0x10, 0x06, 0xa4, 0x54, 0x31, 0x1a, 0xfb, 0xf3, 0x38, 0xc4, 0x3c, 0xb3, 0x46, 0x6b, 0xd1, 0xf8,
	0x30, 0x0e, 0x55, 0xd2, 0x3a, 0x8f, 0x43, 0xbb, 0x17, 0x9d, 0x9c, 0x37, 0xe7, 0x71, 0xa8, 0x77,
	0xe0, 0xfd, 0x5d, 0x0d, 0xea, 0x86, 0x01, 0xdf, 0x01, 0x67, 0xae, 0x82, 0xcd, 0x09, 0x8a, 0x1e,
	0x4d, 0x96, 0x89, 0x36, 0x7b, 0x19, 0xb8, 0xb2, 0x57, 0x9a, 0x57, 0x4c, 0x24, 0xfe, 0x5c, 0xc4,
	0xc1, 0x62, 0xb2, 0xa4, 0x2f, 0x23, 0xfd, 0x3a, 0x22, 0x0f, 0x53, 0x1c, 0xf6, 0xb9, 0x0f, 0xeb,
	0xca, 0xc5, 0xad, 0xf6, 0xa8, 0x60, 0x8f, 0x6b, 0x3c, 0x0a, 0x56, 0xe8, 0xdf, 0x85, 0x76, 0xc0,
	0x12, 0xe6, 0x9f, 0x73, 0x21, 0x6d, 0xb1, 0xab, 0x46, 0x5b, 0x0a, 0xf6, 0xa5, 0x06, 0x91, 0x0f,
	0xa0, 0x67, 0x94, 0x22, 0xa5, 0x32, 0x85, 0x2d, 0x03, 0xb6, 0x84, 0x76, 0x2c, 0xcd, 0x05, 0xe9,
	0xae, 0xa1, 0x59, 0xc2, 0xb1, 0x34, 0x1f, 0x24, 0xd9, 0x82, 0xf6, 0x94, 0xc9, 0xc4, 0x9f, 0xc6,
	0x2c, 0xf0, 0x59, 0x62, 0xea, 0x15, 0xa0, 0x60, 0xfb, 0x31, 0x0b, 0xfa, 0x89, 0x3a, 0x89, 0x4b,
	0x0a, 0x89, 0x3c, 0x43, 0xc3, 0xd8, 0xa0, 0x5d, 0x4b, 0x65, 0x38, 0xa9, 0x5c, 0x6d, 0xcc, 0x02,
	0x1e, 0xa0, 0x91, 0x6c, 0x50, 0xd3, 0x52, 0xb2, 0x50, 0x1e, 0xe9, 0x54, 0x70, 0x16, 0xe8, 0x7a,
	0x57, 0x8d, 0x36, 0xa3, 0xf1, 0x48, 0x03, 0xc8, 0xa7, 0xe0, 0x86, 0xd2, 0x9f, 0xc4, 0x51, 0xc4,
	0x27, 0xca, 0x69, 0x24, 0xb1, 0x2f, 0xd8, 0x78, 0x1c, 0x26, 0xb3, 0x5f, 0x62, 0x08, 0xd8, 0xa0,
	0xd7, 0x43, 0xb9, 0x63, 0xd1, 0xa3, 0x98, 0x1a, 0xa4, 0x9a, 0xcf, 0xac, 0xa7, 0xa3, 0xd5, 0x5e,
	0xb7, 0xc8, 0xf7, 0x60, 0x1d, 0x57, 0x2c, 0x12, 0x1f, 0xb7, 0x6f, 0x16, 0xa5, 0x0d, 0x1f, 0x6e,
	0x86, 0x26, 0xbb, 0x2c, 0x61, 0xfb, 0x7a, 0x79, 0xdf, 0x05, 0x12, 0x4a, 0x7f, 0x19, 0x5f, 0x68,
	0x6a, 0x07, 0x67, 0x76, 0x42, 0x49, 0x6d, 0x38, 0x91, 0x52, 0xab, 0x41, 0x25, 0x4f, 0xfc, 0x89,
	0xe0, 0x4c, 0x2d, 0x98, 0x25, 0xa6, 0xba, 0xe5, 0x18, 0xcc, 0x8e, 0x46, 0xf4, 0x13, 0x25, 0x2a,
	0x91, 0xa8, 0xbd, 0x25, 0x22, 0x1c, 0x2f, 0x92, 0x58, 0xd8, 0x6a, 0x5b, 0x57, 0x24, 0x3b, 0x19,
	0xa8, 0xd2, 0xc2, 0xac, 0xa9, 0x16, 0x22, 0x16, 0x68, 0xef, 0x1a, 0xb4, 0xb7, 0x84, 0x0f, 0x14,
	0xd8, 0xfb, 0xeb, 0x32, 0x38, 0x47, 0x93, 0x53, 0x1e, 0x2c, 0xa6, 0x5c, 0x05, 0xd4, 0xe8, 0x46,
	0x3f, 0x01, 0x98, 0x0b, 0x95, 0xfa, 0xe1, 0x51, 0xd3, 0x19, 0x4a, 0x36, 0x13, 0x3e, 0x4c, 0x91,
	0x34, 0x43, 0x88, 0x0e, 0x6b, 0xe9, 0xfa, 0xf1, 0x5b, 0xc1, 0x50, 0x45, 0xb5, 0x83, 0xc7, 0x6f,
	0xf2, 0x43, 0x68, 0x06, 0x89, 0x95, 0x7e, 0x0d, 0x6d, 0xd3, 0xcd, 0x4b, 0x6c, 0x93, 0x56, 0x04,
	0xda, 0x08, 0x12, 0xa3, 0x12, 0xc5, 0xc0, 0xad, 0xfe, 0xba, 0x81, 0xdb, 0xb7, 0xa1, 0x8b, 0x01,
	0xe2, 0x32, 0x86, 0x58, 0xc3, 0x05, 0xb5, 0x15, 0x34, 0x0d, 0x1f, 0x56, 0x4a, 0x99, 0x8d, 0xd5,
	0x52, 0xa6, 0xf7, 0x17, 0x25, 0x70, 0x68, 0xbc, 0x48, 0xb8, 0x65, 0x19, 0x8d, 0x5f, 0x90, 0x8f,
	0x00, 0x30, 0x59, 0x99, 0xc7, 0x61, 0x94, 0xe0, 0x69, 0xcf, 0xdb, 0x77, 0xc5, 0xd6, 0x43, 0x85,
	0xa3, 0x4d, 0x69, 0x3f, 0xc9, 0x8f, 0x00, 0x32, 0xc9, 0x4d, 0x19, 0xad, 0x7a, 0x2e, 0x01, 0x5e,
	0x91, 0x09, 0x6d, 0x06, 0x69, 0x72, 0xf3, 0x8e, 0x99, 0x50, 0xf7, 0xad, 0x98, 0x1a, 0x9a, 0x21,
	0x94, 0xde, 0x3f, 0x95, 0xa0, 0xfe, 0x84, 0xb3, 0x80, 0x8b, 0x57, 0xa5, 0x80, 0x7a, 0x9d, 0x6f,
	0x9c, 0x02, 0xbe, 0x22, 0x3c, 0xad, 0xfc, 0xee, 0xc2, 0x53, 0x0e, 0xb5, 0x11, 0x1b, 0x4f, 0x55,
	0x26, 0x50, 0x15, 0xf1, 0x0b, 0xeb, 0xf6, 0xb2, 0x0c, 0x5a, 0x15, 0x03, 0x45, 0x42, 0x72, 0x0f,
	0xd6, 0x4e, 0x71, 0xef, 0x96, 0xa9, 0xd7, 0x32, 0x7d, 0x34, 0x57, 0xa8, 0xa5, 0xf0, 0x7e, 0x55,
	0x86, 0x4e, 0x6e, 0x1c, 0xf2, 0x3e, 0xd4, 0x12, 0xac, 0xb6, 0x68, 0xf6, 0x38, 0xd9, 0x74, 0x4f,
	0xc1, 0xa9, 0x46, 0xbf, 0x8a, 0xb1, 0xe5, 0xaf, 0xc7, 0xd8, 0x8f, 0x61, 0xed, 0x84, 0xc7, 0x5f,
	0xc9, 0x34, 0xc1, 0xbf, 0x95, 0xad, 0xba, 0x2f, 0xa6, 0x49, 0xb8, 0x1f, 0x46, 0xfc, 0x28, 0x51,
	0x79, 0x1c, 0xb5, 0xa4, 0x2a, 0xd9, 0x4e, 0x5d, 0xbd, 0x39, 0x50, 0xd5, 0xdf, 0x76, 0xa0, 0xd2,
	0xfb, 0x2d, 0xdd, 0xf6, 0xfe, 0x5b, 0x85, 0x1a, 0x0c, 0xab, 0xf9, 0xe4, 0xc7, 0x2a, 0x6f, 0xce,
	0x26, 0xde, 0x86, 0x11, 0x57, 0xe6, 0xdd, 0xed, 0x6c, 0xde, 0xbd, 0x72, 0x14, 0xca, 0xaf, 0x77,
	0x14, 0x5e, 0xc1, 0xcb, 0xca, 0xd7, 0xab, 0x53, 0xbc, 0x9f, 0xad, 0xd6, 0xe7, 0xa5, 0x88, 0xe2,
	0x36, 0xf5, 0x7b, 0xef, 0xef, 0x4b, 0x00, 0x08, 0xd0, 0x0b, 0x49, 0xbb, 0x95, 0x5e, 0xd9, 0xad,
	0xb0, 0xcb, 0xd2, 0xff, 0xc9, 0x2e, 0xbd, 0xcf, 0xa0, 0xf9, 0x30, 0x66, 0x22, 0xb0, 0x37, 0x90,
	0xa7, 0xf1, 0x42, 0x98, 0x60, 0x03, 0xbf, 0x89, 0x0b, 0x6b, 0xb3, 0x30, 0x5a, 0x24, 0xc6, 0xc0,
	0x34, 0xa9, 0x6d, 0x7a, 0xbf, 0x2e, 0x41, 0x77, 0xd7, 0x66, 0x66, 0x38, 0xc8, 0xd7, 0xb3, 0x62,
	0x29, 0xc7, 0xca, 0x85, 0xe3, 0x92, 0xe3, 0xd8, 0x27, 0xd0, 0x1a, 0xab, 0x59, 0xcc, 0x15, 0x62,
	0x05, 0x4f, 0x66, 0x76, 0xf4, 0x74, 0x23, 0x14, 0xc6, 0xf6, 0x53, 0x7a, 0x9b, 0x50, 0x55, 0x8e,
	0x52, 0xa5, 0xd7, 0xf1, 0x19, 0xae, 0xa9, 0x41, 0xcb, 0xf1, 0x99, 0xf7, 0xcf, 0x65, 0x68, 0x3e,
	0xe5, 0x09, 0x43, 0x0f, 0x79, 0x75, 0x20, 0x55, 0x7a, 0xe3, 0x40, 0xaa, 0x7c, 0x55, 0x20, 0xb5,
	0x61, 0xab, 0x25, 0x3a, 0xd4, 0x32, 0xf5, 0x90, 0x65, 0xcc, 0x50, 0x45, 0xb0, 0x8d, 0x19, 0x3c,
	0x95, 0x72, 0x65, 0xbc, 0x74, 0x1b, 0xb9, 0x9f, 0x83, 0xa9, 0xac, 0x5b, 0x9d, 0xaf, 0x3f, 0x8c,
	0x23, 0x6e, 0x22, 0x8e, 0xb4, 0x9d, 0x56, 0x25, 0xbb, 0x99, 0xaa, 0xe4, 0x6a, 0x6c, 0xd5, 0x43,
	0xff, 0x95, 0x8d, 0xad, 0x2e, 0x0f, 0x26, 0x9c, 0xcb, 0x83, 0x09, 0xef, 0xdf, 0x4a, 0x00, 0x87,
	0xec, 0xc4, 0x66, 0xa9, 0x5b, 0xd0, 0xc2, 0x9a, 0x33, 0xe5, 0x72, 0x31, 0xd5, 0xf2, 0xaf, 0xd1,
	0x2c, 0x88, 0xbc, 0x0d, 0x4d, 0xcd, 0x49, 0x5d, 0x34, 0x57, 0xf8, 0x25, 0x40, 0x6d, 0x19, 0x65,
	0x7b, 0xc8, 0x05, 0x12, 0x54, 0x90, 0x20, 0x07, 0x53, 0x73, 0x60, 0xfb, 0x20, 0x42, 0x92, 0xaa,
	0x9e, 0x23, 0x03, 0x52, 0x4c, 0x89, 0xf8, 0x85, 0x9e, 0x42, 0xdf, 0xa4, 0xa5, 0x6d, 0x35, 0xc3,
	0x5c, 0xf0, 0x73, 0x95, 0x63, 0x22, 0xde, 0x5e, 0xa1, 0x65, 0x60, 0xde, 0x3f, 0x94, 0xa1, 0xad,
	0x14, 0x35, 0x6b, 0xcf, 0xed, 0x91, 0x7e, 0xa5, 0x82, 0xfe, 0xee, 0xed, 0x79, 0xfe, 0x3c, 0x55,
	0xbe, 0x4e, 0x54, 0x50, 0x7d, 0xa3, 0xa8, 0xe0, 0x12, 0x57, 0x50, 0x7b, 0x53, 0x57, 0xf0, 0x9b,
	0x32, 0xd4, 0x30, 0x2e, 0x24, 0xdf, 0x49, 0x2f, 0xfc, 0xf2, 0x03, 0x20, 0xf6, 0x3e, 0x86, 0x94,
	0x7e, 0x18, 0x60, 0xb1, 0x4b, 0x99, 0x19, 0x7d, 0x19, 0x6c, 0xaf, 0x06, 0x4c, 0xd3, 0xfb, 0x93,
	0x32, 0x34, 0x2c, 0x29, 0xe9, 0x02, 0x8c, 0x59, 0xe0, 0x1f, 0x87, 0xd3, 0x84, 0x0b, 0xa7, 0x44,
	0x7a, 0xd0, 0x5a, 0x44, 0x67, 0x51, 0xfc, 0x22, 0xf2, 0xd9, 0x3c, 0x74, 0xca, 0x64, 0x13, 0xf5,
	0x97, 0xfb, 0xf1, 0x22, 0xf1, 0xe3, 0x63, 0x7f, 0x1c, 0x2f, 0xa2, 0x40, 0x3a, 0x15, 0xb2, 0x0e,
	0xbd, 0x45, 0xa4, 0xbc, 0xae, 0x0a, 0xe6, 0xe7, 0x4c, 0x48, 0xee, 0x54, 0xd3, 0xd1, 0x90, 0xe1,
	0x4e, 0x8d, 0x74, 0xa0, 0x19, 0xc5, 0xbe, 0xae, 0xd4, 0x38, 0x75, 0x42, 0xa0, 0x1b, 0xc5, 0x7e,
	0xa6, 0x0c, 0xe3, 0xac, 0x91, 0x77, 0xe0, 0x66, 0x4a, 0xe2, 0x47, 0xb1, 0xc8, 0xa1, 0x1b, 0x6a,
	0x3d, 0x51, 0xec, 0xcb, 0x78, 0xba, 0x40, 0x40, 0x53, 0x8d, 0x61, 0x17, 0x18, 0x63, 0x5d, 0xc7,
	0x01, 0x72, 0x03, 0xd6, 0x25, 0x17, 0xe7, 0xe1, 0x84, 0xfb, 0x8b, 0x28, 0xbd, 0x8a, 0x71, 0x5a,
	0xe4, 0x6d, 0x70, 0xc3, 0xe8, 0x9c, 0x4d, 0x43, 0x34, 0x2a, 0x49, 0x3c, 0x5e, 0x1c, 0xfb, 0xa6,
	0x3e, 0xe5, 0xb4, 0xd5, 0x50, 0x69, 0x0d, 0x04, 0x19, 0xe2, 0x74, 0xbc, 0x7f, 0x2f, 0x41, 0x77,
	0x24, 0xd8, 0xf1, 0x71, 0x38, 0xa1, 0x7c, 0x1e, 0x8b, 0x44, 0x92, 0xef, 0xe6, 0x9f, 0x38, 0xe4,
	0xf3, 0x7c, 0x5b, 0xa8, 0x4e, 0x2f, 0x5e, 0xde, 0xc3, 0xbb, 0x90, 0x34, 0x7a, 0xcc, 0x56, 0x91,
	0x54, 0xa8, 0x40, 0x35, 0x96, 0x6c, 0x1b, 0x45, 0x64, 0x82, 0x33, 0x6b, 0x7a, 0xd7, 0x57, 0x14,
	0xb1, 0x2f, 0x38, 0xd3, 0x7a, 0xa8, 0xbe, 0x24, 0xd9, 0x05, 0x67, 0xa5, 0x86, 0x6f, 0xb5, 0xf1,
	0x15, 0x45, 0xfc, 0x5e, 0xbe, 0x88, 0xaf, 0xa2, 0x38, 0xc0, 0x85, 0xe0, 0xee, 0xc8, 0x6d, 0x73,
	0xad, 0x5e, 0xbc, 0xa1, 0x45, 0x22, 0x7d, 0xcf, 0xbe, 0x0d, 0x30, 0x4f, 0x0c, 0xbb, 0xed, 0xc6,
	0x2e, 0x2d, 0xb1, 0x35, 0xe7, 0xe6, 0x4b, 0x7a, 0x1f, 0x43, 0x63, 0x3f, 0x8c, 0xce, 0xfa, 0xe2,
	0x44, 0x5e, 0x72, 0x07, 0xb6, 0x09, 0x75, 0xbc, 0x70, 0xb4, 0x3e, 0xd0, 0xb4, 0xbc, 0x7f, 0x29,
	0x41, 0xd5, 0x5e, 0x9b, 0x09, 0x3e, 0xb5, 0x5d, 0x04, 0x9f, 0xa6, 0x15, 0xbb, 0x72, 0xa6, 0x62,
	0xf7, 0x2e, 0xb4, 0x43, 0xe9, 0x27, 0x7c, 0x36, 0x9f, 0x2a, 0x03, 0x6a, 0xee, 0x88, 0x5b, 0xa1,
	0x1c, 0x59, 0xd0, 0xea, 0xa3, 0x8e, 0x6a, 0xf1, 0x51, 0xc7, 0x3d, 0xa8, 0x9f, 0xbd, 0x60, 0xe2,
	0xc4, 0x5e, 0x5f, 0xad, 0xe7, 0x99, 0x80, 0x5b, 0xa0, 0x86, 0x84, 0xbc, 0x87, 0x0f, 0x91, 0x74,
	0xb6, 0xed, 0xa3, 0x3b, 0xd0, 0x16, 0xaf, 0x93, 0x42, 0x87, 0x6c, 0xc6, 0xbd, 0x7f, 0x2d, 0x03,
	0x79, 0x6c, 0xab, 0xf5, 0x7b, 0x32, 0x9e, 0x9c, 0x0a, 0xe5, 0x42, 0xdc, 0x65, 0x38, 0x69, 0xde,
	0x41, 0xd8, 0x90, 0xf1, 0x5d, 0x68, 0xcf, 0xd8, 0x85, 0x9f, 0x7b, 0x1f, 0x54, 0xa3, 0xad, 0x19,
	0xbb, 0xd8, 0xcd, 0x54, 0x7d, 0x67, 0x61, 0xb4, 0x24, 0xa9, 0x18, 0x92, 0x30, 0x4a, 0x49, 0x96,
	0x95, 0xd3, 0xea, 0x1b, 0x57, 0x4e, 0x6b, 0xaf, 0x59, 0x39, 0xbd, 0xa2, 0xfa, 0x5b, 0xbf, 0xaa,
	0xfa, 0xeb, 0x41, 0x67, 0x96, 0xbb, 0x2f, 0xd0, 0x39, 0x1e, 0xae, 0x3b, 0x4b, 0xa3, 0x76, 0x9f,
	0xd2, 0x34, 0x0c, 0x0d, 0xbb, 0xb0, 0x34, 0xde, 0x3f, 0x96, 0x60, 0xed, 0x09, 0x67, 0xc9, 0x53,
	0x36, 0x57, 0x29, 0xe1, 0x29, 0x67, 0x89, 0x3f, 0x63, 0x89, 0x08, 0x2f, 0x0c, 0x2f, 0xe1, 0x14,
	0xb1, 0x0a, 0xf2, 0xbf, 0x72, 0x93, 0x77, 0x05, 0x23, 0xaa, 0x57, 0x30, 0xc2, 0x9b, 0x41, 0x57,
	0x79, 0xb7, 0x30, 0x3a, 0x19, 0x4c, 0xf9, 0x8c, 0x47, 0xc9, 0x4a, 0x8d, 0xbf, 0x9c, 0xab, 0xf1,
	0x7f, 0x0e, 0x5d, 0xa1, 0xa9, 0xad, 0xdf, 0x50, 0x2e, 0xaf, 0x9b, 0x73, 0x79, 0x66, 0x38, 0xe3,
	0x36, 0x3a, 0x22, 0xdb, 0xf4, 0x7c, 0xb8, 0x91, 0xbf, 0x4b, 0xd3, 0x58, 0x95, 0x1b, 0xef, 0x82,
	0x63, 0xc7, 0xb6, 0xae, 0xc6, 0x9c, 0xea, 0x9b, 0xc5, 0xd1, 0xcd, 0x62, 0x69, 0xcf, 0x74, 0xb1,
	0xce, 0xca, 0x1b, 0xc1, 0xad, 0xcb, 0x26, 0x30, 0x12, 0xf8, 0x61, 0x2e, 0x47, 0xf4, 0xae, 0xbc,
	0xe1, 0x4b, 0x57, 0xa5, 0x53, 0x45, 0xef, 0xd7, 0x37, 0xa0, 0x61, 0xa7, 0x50, 0x72, 0xd6, 0x9b,
	0xf7, 0xf1, 0x29, 0x99, 0xbe, 0x07, 0x01, 0x0d, 0xda, 0x89, 0x03, 0x8c, 0x24, 0x74, 0x21, 0xa5,
	0x5c, 0x48, 0x0e, 0xd0, 0x27, 0x52, 0x8d, 0x56, 0xc6, 0x43, 0x85, 0x0f, 0xf6, 0xf5, 0x90, 0xfa,
	0x26, 0xdf, 0xc9, 0xc4, 0x89, 0xa5, 0x95, 0x9c, 0xd4, 0xb0, 0xd4, 0x86, 0x8e, 0x97, 0x15, 0x10,
	0x75, 0xa1, 0xb2, 0x50, 0x40, 0xbc, 0x0d, 0x9d, 0xf0, 0x24, 0x8a, 0x05, 0x0f, 0xfc, 0x17, 0xb1,
	0x08, 0xec, 0x45, 0x41, 0xdb, 0x00, 0x9f, 0x2b, 0x18, 0x79, 0x0b, 0x9a, 0xca, 0x4f, 0x6a, 0x02,
	0x1d, 0x87, 0x36, 0xc6, 0xcc, 0x20, 0xef, 0x41, 0x7d, 0x3e, 0x65, 0x93, 0xf4, 0xa1, 0xd7, 0xe5,
	0xba, 0xab, 0x49, 0xc8, 0x03, 0xe8, 0xe8, 0x2f, 0x3f, 0xe2, 0x4c, 0x8c, 0x5f, 0xba, 0xdd, 0xab,
	0xfb, 0xb4, 0x35, 0xe5, 0x10, 0x09, 0xc9, 0x63, 0xb8, 0x86, 0x9e, 0x31, 0x4c, 0xd2, 0xb7, 0x4a,
	0xf6, 0x31, 0x58, 0x36, 0xc9, 0xfd, 0xd2, 0xd0, 0x98, 0x87, 0x4b, 0xd4, 0x39, 0xcf, 0x03, 0xe4,
	0xd2, 0xe3, 0x39, 0xaf, 0xf4, 0x78, 0xbb, 0xe0, 0xac, 0x3c, 0x8d, 0x92, 0xee, 0xb5, 0x82, 0xd2,
	0xfd, 0x2c, 0xf7, 0x4c, 0x8a, 0xf6, 0xf2, 0xcf, 0xa6, 0x2e, 0xf7, 0x81, 0xe4, 0x4d, 0x7d, 0xa0,
	0x3a, 0xf1, 0xcb, 0x30, 0x50, 0xba, 0xeb, 0x85, 0xcc, 0x67, 0x19, 0x07, 0x42, 0x1a, 0x07, 0xae,
	0x3a, 0xed, 0x8d, 0xd7, 0x72, 0xda, 0xf7, 0x55, 0xf0, 0x8c, 0xaa, 0x2e, 0xdd, 0xeb, 0x85, 0x6b,
	0x02, 0x7b, 0x0a, 0x52, 0x1a, 0xf2, 0x13, 0xe8, 0xe6, 0x1e, 0xa5, 0xe9, 0x0b, 0xc6, 0x7c, 0xae,
	0x7f, 0x98, 0x79, 0xa0, 0x46, 0x3b, 0xd9, 0xe7, 0x6a, 0xc8, 0xa0, 0x95, 0xd7, 0x6f, 0xd2, 0xbd,
	0x51, 0x60, 0xd0, 0x4e, 0xee, 0x25, 0x1c, 0xed, 0xe5, 0x5f, 0xc6, 0x49, 0xf2, 0x29, 0xb4, 0x4c,
	0xb5, 0x16, 0xa3, 0x6d, 0x7d, 0x1b, 0x7d, 0x3d, 0x37, 0x80, 0xc5, 0xd2, 0x2c, 0x25, 0x19, 0xc1,
	0xe6, 0x8a, 0x94, 0x2d, 0x93, 0x6f, 0xe2, 0x18, 0xdf, 0xbc, 0x52, 0xd6, 0x9a, 0xdd, 0x1b, 0x5f,
	0x15, 0x81, 0x92, 0xfc, 0x00, 0x9a, 0xfa, 0xc1, 0x60, 0xc8, 0xa5, 0x7b, 0xab, 0xc0, 0xc5, 0x1d,
	0xfd, 0x98, 0x90, 0x2e, 0x89, 0xc8, 0x1d, 0xa8, 0x63, 0x0e, 0x21, 0xdd, 0xb7, 0x90, 0xbc, 0x98,
	0x63, 0x18, 0x3c, 0xf1, 0xa0, 0x3a, 0x8f, 0x43, 0xfb, 0x0a, 0xa0, 0x9b, 0x65, 0x73, 0x1c, 0x52,
	0xc4, 0x91, 0xef, 0x43, 0x73, 0x1e, 0x87, 0x78, 0x6d, 0x23, 0xdd, 0x77, 0x0a, 0xf3, 0x1f, 0xc6,
	0x21, 0x16, 0xce, 0x1a, 0x73, 0xfd, 0xb1, 0x72, 0x23, 0xf8, 0xe9, 0x6b, 0xdd, 0x08, 0x7e, 0x02,
	0x2d, 0x75, 0x50, 0xfc, 0x13, 0x11, 0x2f, 0xe6, 0xd2, 0x7d, 0x50, 0xd0, 0x49, 0x75, 0x98, 0x1e,
	0x2b, 0x24, 0x85, 0xa9, 0xfd, 0xc4, 0xd3, 0x97, 0x88, 0x70, 0x2e, 0xdd, 0x9f, 0x14, 0x4e, 0xdf,
	0x48, 0x84, 0x73, 0xaa, 0xb1, 0xe4, 0x47, 0x2b, 0xc9, 0xef, 0x4f, 0x91, 0x3a, 0x7f, 0xdf, 0x98,
	0xa2, 0x57, 0x92, 0xe2, 0xfb, 0xd0, 0x30, 0x89, 0xaa, 0x74, 0xfb, 0x85, 0xcd, 0xef, 0x6a, 0x14,
	0x4d, 0x69, 0xc8, 0x03, 0x68, 0x23, 0x6f, 0xad, 0xe4, 0x1f, 0x16, 0xb4, 0x67, 0x59, 0xde, 0xa1,
	0x2d, 0x91, 0x7e, 0x63, 0x9d, 0x50, 0xd7, 0x75, 0xa5, 0xfb, 0x59, 0xa1, 0x4e, 0xb8, 0x87, 0x18,
	0x6a, 0x29, 0x72, 0x17, 0x70, 0xdf, 0xfc, 0x3a, 0x17, 0x70, 0xdf, 0x7a, 0x93, 0x0b, 0x38, 0x02,
	0x55, 0x95, 0xd4, 0xba, 0x5b, 0xda, 0x83, 0xa8, 0x6f, 0xac, 0x08, 0xf0, 0x8b, 0xc4, 0x7d, 0xd7,
	0x54, 0x04, 0xf8, 0x45, 0x42, 0x3e, 0x82, 0x4d, 0xf5, 0x6b, 0xd3, 0x8c, 0x4c, 0x60, 0xe0, 0xe1,
	0xb5, 0xe5, 0xba, 0xc2, 0x52, 0x8d, 0x4c, 0xe3, 0x9f, 0x3e, 0xf4, 0x34, 0xc7, 0xa4, 0x49, 0x25,
	0xa5, 0x7b, 0x1b, 0x77, 0xe4, 0x5e, 0x59, 0x5b, 0xc5, 0xe8, 0x20, 0x6d, 0xe2, 0xb9, 0x5f, 0x5e,
	0xf8, 0x63, 0xb5, 0x46, 0xba, 0xdf, 0x2e, 0x9c, 0xfb, 0x7c, 0x79, 0x89, 0xf6, 0x82, 0x5c, 0x5b,
	0x92, 0xff, 0x07, 0x3d, 0x5c, 0x7d, 0x0a, 0x97, 0xee, 0x7b, 0x45, 0x75, 0xd7, 0x65, 0x49, 0xda,
	0x55, 0xa4, 0xe9, 0x88, 0xca, 0x68, 0x74, 0xb0, 0xb3, 0x79, 0x2f, 0x20, 0xdd, 0xf7, 0xaf, 0xec,
	0xda, 0x56, 0x84, 0x7d, 0x43, 0xa7, 0x6c, 0x1e, 0xda, 0xd5, 0xe5, 0xee, 0x3f, 0xb8, 0xf4, 0x5d,
	0x51, 0xba, 0x79, 0x7c, 0x57, 0xb4, 0xdc, 0xbb, 0x4a, 0x62, 0x62, 0x16, 0xb8, 0xf7, 0x8b, 0x49,
	0x4c, 0xcc, 0x02, 0x8a, 0x48, 0xb2, 0x0d, 0xcd, 0x99, 0xad, 0x4e, 0xb9, 0x3f, 0x28, 0x94, 0x07,
	0xd3, 0xca, 0x15, 0x5d, 0x92, 0xe1, 0x95, 0x4b, 0x5a, 0x8d, 0x71, 0x3f, 0x2c, 0x5e, 0xb9, 0xa4,
	0x48, 0x9a, 0x21, 0x54, 0x49, 0x7f, 0xa2, 0x73, 0x48, 0x5f, 0xe8, 0x24, 0xd2, 0xfd, 0x71, 0x41,
	0x14, 0xf9, 0x2c, 0x93, 0x76, 0x93, 0x7c, 0xd6, 0xf9, 0x00, 0xda, 0x68, 0x0e, 0xec, 0x00, 0x7b,
	0x85, 0x43, 0xb4, 0xcc, 0xe2, 0x28, 0x5a, 0x0e, 0xdb, 0xf3, 0x1e, 0xac, 0xe9, 0xd7, 0xb3, 0xd2,
	0xfd, 0xa8, 0x70, 0x88, 0xf4, 0xcb, 0x61, 0x6a, 0x29, 0x56, 0x52, 0xbb, 0x8f, 0x5f, 0x27, 0xb5,
	0x53, 0xda, 0x7a, 0xcc, 0x79, 0xe0, 0xcf, 0xed, 0x03, 0x3e, 0xe9, 0x7e, 0x52, 0xd0, 0xd6, 0xdc,
	0x0b, 0x3f, 0xda, 0x3d, 0xce, 0x36, 0x25, 0xf9, 0x02, 0xd6, 0x55, 0xbc, 0xa2, 0x0e, 0x48, 0xd6,
	0x11, 0x7f, 0x5e, 0xa8, 0xad, 0x0c, 0x35, 0xd5, 0xd2, 0x1f, 0x5f, 0x8b, 0x56, 0x20, 0x36, 0x00,
	0x39, 0x93, 0xee, 0xce, 0x65, 0x01, 0x88, 0x7d, 0x76, 0x48, 0x0e, 0x61, 0x23, 0x7d, 0x40, 0xe5,
	0x87, 0x36, 0x27, 0x93, 0xee, 0x2e, 0xf6, 0x7a, 0x27, 0xfb, 0xd4, 0xaa, 0x90, 0xb9, 0xd1, 0xf5,
	0x93, 0x02, 0x0c, 0xdd, 0x82, 0x49, 0x43, 0xe6, 0xd2, 0x7d, 0x5c, 0x50, 0x76, 0x93, 0xad, 0xe0,
	0x7f, 0x1c, 0xd4, 0x07, 0x96, 0x9f, 0x4e, 0x78, 0x6c, 0x03, 0xfa, 0x41, 0x41, 0x09, 0xd3, 0x3b,
	0x7b, 0xda, 0x3c, 0x49, 0xaf, 0xef, 0x7f, 0x0a, 0xce, 0x84, 0x09, 0x3f, 0xf7, 0x5c, 0xe4, 0xd1,
	0x2b, 0x9f, 0x8b, 0x74, 0x27, 0x4c, 0x64, 0x9f, 0x47, 0xff, 0x1e, 0x5c, 0x93, 0x91, 0x6f, 0x43,
	0x7e, 0x93, 0x34, 0x3d, 0xc1, 0x21, 0xde, 0xfb, 0x2d, 0x81, 0xb9, 0x8e, 0xe6, 0x69, 0x4f, 0x46,
	0x39, 0x80, 0x37, 0x07, 0x67, 0x55, 0x34, 0x85, 0x62, 0xf5, 0x6b, 0x55, 0xe0, 0x3f, 0x80, 0x1e,
	0x9b, 0x4c, 0xb8, 0x94, 0xab, 0xb9, 0x6f, 0x57, 0x83, 0x6d, 0x6e, 0x7b, 0xf7, 0xf7, 0xe1, 0x5a,
	0xe1, 0xaf, 0x30, 0xa4, 0x05, 0x6b, 0xcf, 0xf5, 0x63, 0x69, 0xe7, 0x1b, 0xa4, 0x01, 0xd5, 0x87,
	0xe1, 0x19, 0x77, 0x4a, 0x64, 0x0d, 0x2a, 0x3b, 0x4c, 0x38, 0x15, 0xf5, 0xf1, 0x50, 0x4a, 0xa7,
	0x4a, 0x7a, 0xd0, 0xca, 0x3c, 0xc5, 0xd3, 0xa5, 0xa9, 0x1d, 0x26, 0x86, 0xf1, 0x21, 0x13, 0x67,
	0x4e, 0xfd, 0xee, 0x7f, 0x95, 0xa0, 0x95, 0x79, 0x10, 0x4a, 0x36, 0xc0, 0x39, 0x7c, 0xf6, 0x70,
	0x7f, 0x6f, 0xc7, 0x1f, 0xd1, 0xfe, 0xf0, 0xe8, 0xf0, 0x80, 0x8e, 0x9c, 0x12, 0x21, 0xd0, 0x3d,
	0x1a, 0xd1, 0xc1, 0x60, 0xe4, 0x0f, 0x07, 0xa3, 0xe7, 0x07, 0xf4, 0x0b, 0xa7, 0x8c, 0x4b, 0xe8,
	0xef, 0x8d, 0xf6, 0x86, 0x8f, 0x9d, 0x0a, 0x69, 0x43, 0x03, 0xe9, 0x1f, 0x0d, 0xa8, 0x53, 0x55,
	0x2d, 0xb4, 0xc4, 0x6a, 0xc6, 0xba, 0x22, 0x9c, 0xb2, 0x08, 0x1b, 0x6b, 0x0a, 0xf5, 0xf0, 0xe8,
	0xc8, 0xa7, 0x83, 0xe1, 0xc8, 0x69, 0x10, 0x07, 0xda, 0xaa, 0x75, 0xf8, 0x6c, 0xe4, 0x3f, 0xec,
	0xef, 0x7c, 0xe1, 0x34, 0x15, 0x7e, 0x87, 0x1e, 0x3c, 0xf7, 0x1f, 0xed, 0xff, 0xdc, 0x01, 0xb5,
	0xb3, 0xc3, 0x3e, 0xfd, 0xc2, 0x69, 0x91, 0x6b, 0xd0, 0xd9, 0x1f, 0xf4, 0xbf, 0x1c, 0xf8, 0xaa,
	0xad, 0xe6, 0x6c, 0xab, 0x9d, 0xf4, 0xf7, 0xf7, 0x1e, 0x3f, 0xc1, 0x25, 0x74, 0x70, 0xa7, 0x7b,
	0xbb, 0x83, 0xa3, 0x27, 0x7d, 0xaa, 0x00, 0x5d, 0x72, 0x03, 0xd6, 0x0f, 0x86, 0xfe, 0xee, 0xe0,
	0x69, 0x7f, 0xb8, 0x9b, 0xd9, 0x4d, 0xef, 0xee, 0x1d, 0x68, 0x67, 0x5f, 0x4b, 0xaa, 0x05, 0x9a,
	0x97, 0xe7, 0x4e, 0x49, 0x35, 0x64, 0x82, 0x55, 0x57, 0xa7, 0x72, 0xf7, 0x4f, 0x4b, 0xb0, 0xf5,
	0xdb, 0xae, 0x0d, 0xd5, 0xd2, 0x0e, 0x76, 0x47, 0xfe, 0xf3, 0xbd, 0xd1, 0x13, 0xff, 0x17, 0x07,
	0xc3, 0x81, 0x53, 0xc2, 0xa9, 0x2d, 0xe8, 0x68, 0x74, 0x70, 0xe8, 0x1f, 0x1e, 0xec, 0x0d, 0x47,
	0xba, 0xaa, 0x98, 0x47, 0x8c, 0xf6, 0x9e, 0x0e, 0x9c, 0x0a, 0xb9, 0x05, 0x9b, 0x4f, 0xfa, 0x47,
	0xfe, 0x6e, 0x7f, 0x34, 0x50, 0x10, 0x7f, 0x70, 0x34, 0xda, 0x7b, 0xda, 0x1f, 0x0d, 0x76, 0x9d,
	0xaa, 0x5a, 0x11, 0x1d, 0x3c, 0x7e, 0xb6, 0xdf, 0xa7, 0x4e, 0x4d, 0x35, 0x8e, 0x46, 0xfd, 0x9f,
	0xfb, 0x7b, 0x43, 0xa7, 0x7e, 0xd7, 0x03, 0x58, 0x3e, 0x03, 0x27, 0x00, 0xf5, 0x47, 0x83, 0xa7,
	0xfd, 0x7d, 0xb5, 0x80, 0x06, 0x54, 0xf1, 0xab, 0x7c, 0xf7, 0x3f, 0x4a, 0xd0, 0xce, 0xba, 0x77,
	0xb2, 0x0e, 0x3d, 0x25, 0xb5, 0x01, 0xed, 0xd3, 0x9f, 0xfb, 0x8f, 0x0e, 0x9e, 0x0d, 0x77, 0x9d,
	0x92, 0x5a, 0x97, 0x9a, 0xdb, 0x3f, 0x78, 0x36, 0xf2, 0x0f, 0x1e, 0xf9, 0x0f, 0x15, 0xf8, 0xc8,
	0x29, 0x2b, 0xe2, 0xe1, 0x81, 0x7f, 0x40, 0xf7, 0x1e, 0xef, 0x0d, 0xcd, 0x26, 0x2a, 0xc4, 0x85,
	0x8d, 0xe1, 0x81, 0xbf, 0xab, 0xd6, 0x38, 0xec, 0x8f, 0xf6, 0x0e, 0x2c, 0xa6, 0x4a, 0x6e, 0xc3,
	0xb7, 0x96, 0xe4, 0xc3, 0x03, 0x7a, 0x09, 0x51, 0x4d, 0x09, 0x7d, 0x78, 0xe0, 0x7f, 0xb9, 0xd7,
	0x37, 0x90, 0xba, 0x12, 0xdd, 0xf0, 0xc0, 0x3f, 0x3a, 0xd8, 0x7f, 0xa6, 0x08, 0x9d, 0x35, 0x72,
	0x13, 0xae, 0xef, 0x1c, 0x0c, 0x87, 0x83, 0x1d, 0xec, 0xb8, 0xbf, 0xf7, 0x74, 0x6f, 0x84, 0x63,
	0x38, 0x0d, 0xc5, 0xda, 0xdd, 0x67, 0xb4, 0xbf, 0x8a, 0x68, 0xde, 0x7d, 0xa0, 0x6f, 0x4f, 0xd3,
	0x42, 0x80, 0x62, 0x95, 0xe0, 0x4c, 0x39, 0x4b, 0xe7, 0x1b, 0x4a, 0x59, 0x16, 0x91, 0x6d, 0xa2,
	0x94, 0x4d, 0x35, 0xd5, 0x29, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0xb4, 0xdd, 0xc4,
	0x63, 0x37, 0x00, 0x00,
}
